
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000003d2  00000446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000da9  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000818  00000000  00000000  0000132d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bd3  00000000  00000000  00001b45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  00002718  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000058c  00000000  00000000  00002870  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e38  00000000  00000000  00002dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003c34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  7a:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <MAX_SEND>:

#define F_CPU 1000000UL
#include <util/delay.h>

void MAX_SEND(u8 COM , u8 Data)
{	
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	d8 2f       	mov	r29, r24
  88:	c6 2f       	mov	r28, r22
	GPIO_SetPinValue(GPIO_PORTB, GPIO_PIN4 , GPIO_PIN_LOW);
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	64 e0       	ldi	r22, 0x04	; 4
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	0e 94 0b 01 	call	0x216	; 0x216 <GPIO_SetPinValue>
	SPI_SendData(COM);
  94:	8d 2f       	mov	r24, r29
  96:	0e 94 c3 01 	call	0x386	; 0x386 <SPI_SendData>
	SPI_SendData(Data);
  9a:	8c 2f       	mov	r24, r28
  9c:	0e 94 c3 01 	call	0x386	; 0x386 <SPI_SendData>
	GPIO_SetPinValue(GPIO_PORTB, GPIO_PIN4 , GPIO_PIN_HIGH);
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	64 e0       	ldi	r22, 0x04	; 4
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	0e 94 0b 01 	call	0x216	; 0x216 <GPIO_SetPinValue>
}
  aa:	df 91       	pop	r29
  ac:	cf 91       	pop	r28
  ae:	08 95       	ret

000000b0 <MAX_Init>:

void MAX_Init()
{
	MAX_SEND(0x09 , 0xFF);
  b0:	6f ef       	ldi	r22, 0xFF	; 255
  b2:	89 e0       	ldi	r24, 0x09	; 9
  b4:	0e 94 41 00 	call	0x82	; 0x82 <MAX_SEND>
	MAX_SEND(0x0B , 0x07);
  b8:	67 e0       	ldi	r22, 0x07	; 7
  ba:	8b e0       	ldi	r24, 0x0B	; 11
  bc:	0e 94 41 00 	call	0x82	; 0x82 <MAX_SEND>
	MAX_SEND(0x0A , 0x0F);
  c0:	6f e0       	ldi	r22, 0x0F	; 15
  c2:	8a e0       	ldi	r24, 0x0A	; 10
  c4:	0e 94 41 00 	call	0x82	; 0x82 <MAX_SEND>
    MAX_SEND(0x0C , 0x01);
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	8c e0       	ldi	r24, 0x0C	; 12
  cc:	0e 94 41 00 	call	0x82	; 0x82 <MAX_SEND>
  d0:	08 95       	ret

000000d2 <main>:
}

int main(void)
{
	SPI_Init();
  d2:	0e 94 93 01 	call	0x326	; 0x326 <SPI_Init>
	MAX_Init();
  d6:	0e 94 58 00 	call	0xb0	; 0xb0 <MAX_Init>
	
	u8 index;
	u8 num = 0;
  da:	60 e0       	ldi	r22, 0x00	; 0
    while (1) 
    {
		for(index = 1; index < 9; index++)
  dc:	c1 e0       	ldi	r28, 0x01	; 1
  de:	10 c0       	rjmp	.+32     	; 0x100 <main+0x2e>
		{
			MAX_SEND(index,num++);
  e0:	d1 e0       	ldi	r29, 0x01	; 1
  e2:	d6 0f       	add	r29, r22
  e4:	8c 2f       	mov	r24, r28
  e6:	0e 94 41 00 	call	0x82	; 0x82 <MAX_SEND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	2f e9       	ldi	r18, 0x9F	; 159
  ec:	86 e8       	ldi	r24, 0x86	; 134
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x1e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x28>
  fa:	00 00       	nop
	
	u8 index;
	u8 num = 0;
    while (1) 
    {
		for(index = 1; index < 9; index++)
  fc:	cf 5f       	subi	r28, 0xFF	; 255
		{
			MAX_SEND(index,num++);
  fe:	6d 2f       	mov	r22, r29
	
	u8 index;
	u8 num = 0;
    while (1) 
    {
		for(index = 1; index < 9; index++)
 100:	c9 30       	cpi	r28, 0x09	; 9
 102:	70 f3       	brcs	.-36     	; 0xe0 <main+0xe>
 104:	eb cf       	rjmp	.-42     	; 0xdc <main+0xa>

00000106 <GPIO_SetPinDirection>:
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= GPIO_PORTD) && (Copy_u8PIN <= GPIO_PIN7))
 106:	84 30       	cpi	r24, 0x04	; 4
 108:	08 f0       	brcs	.+2      	; 0x10c <GPIO_SetPinDirection+0x6>
 10a:	7b c0       	rjmp	.+246    	; 0x202 <GPIO_SetPinDirection+0xfc>
 10c:	68 30       	cpi	r22, 0x08	; 8
 10e:	08 f0       	brcs	.+2      	; 0x112 <GPIO_SetPinDirection+0xc>
 110:	7a c0       	rjmp	.+244    	; 0x206 <GPIO_SetPinDirection+0x100>
	{
		if ( Copy_u8Direction == GPIO_PIN_OUTPUT )
 112:	41 30       	cpi	r20, 0x01	; 1
 114:	c1 f5       	brne	.+112    	; 0x186 <GPIO_SetPinDirection+0x80>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	91 f0       	breq	.+36     	; 0x13e <GPIO_SetPinDirection+0x38>
 11a:	28 f0       	brcs	.+10     	; 0x126 <GPIO_SetPinDirection+0x20>
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	d9 f0       	breq	.+54     	; 0x156 <GPIO_SetPinDirection+0x50>
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	29 f1       	breq	.+74     	; 0x16e <GPIO_SetPinDirection+0x68>
 124:	72 c0       	rjmp	.+228    	; 0x20a <GPIO_SetPinDirection+0x104>
			{
			case GPIO_PORTA: SET_BIT(DDRA,Copy_u8PIN); break;
 126:	2a b3       	in	r18, 0x1a	; 26
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <GPIO_SetPinDirection+0x2c>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <GPIO_SetPinDirection+0x28>
 136:	82 2b       	or	r24, r18
 138:	8a bb       	out	0x1a, r24	; 26
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 13a:	81 e0       	ldi	r24, 0x01	; 1
		if ( Copy_u8Direction == GPIO_PIN_OUTPUT )
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case GPIO_PORTA: SET_BIT(DDRA,Copy_u8PIN); break;
 13c:	08 95       	ret
			case GPIO_PORTB: SET_BIT(DDRB,Copy_u8PIN); break;
 13e:	27 b3       	in	r18, 0x17	; 23
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <GPIO_SetPinDirection+0x44>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <GPIO_SetPinDirection+0x40>
 14e:	82 2b       	or	r24, r18
 150:	87 bb       	out	0x17, r24	; 23
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 152:	81 e0       	ldi	r24, 0x01	; 1
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case GPIO_PORTA: SET_BIT(DDRA,Copy_u8PIN); break;
			case GPIO_PORTB: SET_BIT(DDRB,Copy_u8PIN); break;
 154:	08 95       	ret
			case GPIO_PORTC: SET_BIT(DDRC,Copy_u8PIN); break;
 156:	24 b3       	in	r18, 0x14	; 20
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <GPIO_SetPinDirection+0x5c>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <GPIO_SetPinDirection+0x58>
 166:	82 2b       	or	r24, r18
 168:	84 bb       	out	0x14, r24	; 20
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 16a:	81 e0       	ldi	r24, 0x01	; 1
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case GPIO_PORTA: SET_BIT(DDRA,Copy_u8PIN); break;
			case GPIO_PORTB: SET_BIT(DDRB,Copy_u8PIN); break;
			case GPIO_PORTC: SET_BIT(DDRC,Copy_u8PIN); break;
 16c:	08 95       	ret
			case GPIO_PORTD: SET_BIT(DDRD,Copy_u8PIN); break;
 16e:	21 b3       	in	r18, 0x11	; 17
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <GPIO_SetPinDirection+0x74>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <GPIO_SetPinDirection+0x70>
 17e:	82 2b       	or	r24, r18
 180:	81 bb       	out	0x11, r24	; 17
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 182:	81 e0       	ldi	r24, 0x01	; 1
			switch (Copy_u8PORT)
			{
			case GPIO_PORTA: SET_BIT(DDRA,Copy_u8PIN); break;
			case GPIO_PORTB: SET_BIT(DDRB,Copy_u8PIN); break;
			case GPIO_PORTC: SET_BIT(DDRC,Copy_u8PIN); break;
			case GPIO_PORTD: SET_BIT(DDRD,Copy_u8PIN); break;
 184:	08 95       	ret
			}
		}

		else if ( Copy_u8Direction == GPIO_PIN_INPUT )
 186:	41 11       	cpse	r20, r1
 188:	42 c0       	rjmp	.+132    	; 0x20e <GPIO_SetPinDirection+0x108>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	99 f0       	breq	.+38     	; 0x1b4 <GPIO_SetPinDirection+0xae>
 18e:	28 f0       	brcs	.+10     	; 0x19a <GPIO_SetPinDirection+0x94>
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	e9 f0       	breq	.+58     	; 0x1ce <GPIO_SetPinDirection+0xc8>
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	41 f1       	breq	.+80     	; 0x1e8 <GPIO_SetPinDirection+0xe2>
 198:	3c c0       	rjmp	.+120    	; 0x212 <GPIO_SetPinDirection+0x10c>
			{
			case GPIO_PORTA: CLR_BIT(DDRA,Copy_u8PIN); break;
 19a:	2a b3       	in	r18, 0x1a	; 26
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <GPIO_SetPinDirection+0xa0>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <GPIO_SetPinDirection+0x9c>
 1aa:	80 95       	com	r24
 1ac:	82 23       	and	r24, r18
 1ae:	8a bb       	out	0x1a, r24	; 26
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
		else if ( Copy_u8Direction == GPIO_PIN_INPUT )
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case GPIO_PORTA: CLR_BIT(DDRA,Copy_u8PIN); break;
 1b2:	08 95       	ret
			case GPIO_PORTB: CLR_BIT(DDRB,Copy_u8PIN); break;
 1b4:	27 b3       	in	r18, 0x17	; 23
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <GPIO_SetPinDirection+0xba>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <GPIO_SetPinDirection+0xb6>
 1c4:	80 95       	com	r24
 1c6:	82 23       	and	r24, r18
 1c8:	87 bb       	out	0x17, r24	; 23
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case GPIO_PORTA: CLR_BIT(DDRA,Copy_u8PIN); break;
			case GPIO_PORTB: CLR_BIT(DDRB,Copy_u8PIN); break;
 1cc:	08 95       	ret
			case GPIO_PORTC: CLR_BIT(DDRC,Copy_u8PIN); break;
 1ce:	24 b3       	in	r18, 0x14	; 20
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <GPIO_SetPinDirection+0xd4>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <GPIO_SetPinDirection+0xd0>
 1de:	80 95       	com	r24
 1e0:	82 23       	and	r24, r18
 1e2:	84 bb       	out	0x14, r24	; 20
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case GPIO_PORTA: CLR_BIT(DDRA,Copy_u8PIN); break;
			case GPIO_PORTB: CLR_BIT(DDRB,Copy_u8PIN); break;
			case GPIO_PORTC: CLR_BIT(DDRC,Copy_u8PIN); break;
 1e6:	08 95       	ret
			case GPIO_PORTD: CLR_BIT(DDRD,Copy_u8PIN); break;
 1e8:	21 b3       	in	r18, 0x11	; 17
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <GPIO_SetPinDirection+0xee>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <GPIO_SetPinDirection+0xea>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	81 bb       	out	0x11, r24	; 17
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
			switch (Copy_u8PORT)
			{
			case GPIO_PORTA: CLR_BIT(DDRA,Copy_u8PIN); break;
			case GPIO_PORTB: CLR_BIT(DDRB,Copy_u8PIN); break;
			case GPIO_PORTC: CLR_BIT(DDRC,Copy_u8PIN); break;
			case GPIO_PORTD: CLR_BIT(DDRD,Copy_u8PIN); break;
 200:	08 95       	ret
		}
	}

	else
	{
		LOC_enumState = GPIO_NOK ;
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	08 95       	ret
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	08 95       	ret
			}
		}

		else
		{
			LOC_enumState = GPIO_NOK ;
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	08 95       	ret
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 212:	81 e0       	ldi	r24, 0x01	; 1
		LOC_enumState = GPIO_NOK ;
	}

	return LOC_enumState ;

}
 214:	08 95       	ret

00000216 <GPIO_SetPinValue>:
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= GPIO_PORTD) && (Copy_u8PIN <= GPIO_PIN7))
 216:	84 30       	cpi	r24, 0x04	; 4
 218:	08 f0       	brcs	.+2      	; 0x21c <GPIO_SetPinValue+0x6>
 21a:	7b c0       	rjmp	.+246    	; 0x312 <GPIO_SetPinValue+0xfc>
 21c:	68 30       	cpi	r22, 0x08	; 8
 21e:	08 f0       	brcs	.+2      	; 0x222 <GPIO_SetPinValue+0xc>
 220:	7a c0       	rjmp	.+244    	; 0x316 <GPIO_SetPinValue+0x100>
	{
		if (Copy_u8Value == GPIO_PIN_HIGH)
 222:	41 30       	cpi	r20, 0x01	; 1
 224:	c1 f5       	brne	.+112    	; 0x296 <GPIO_SetPinValue+0x80>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	91 f0       	breq	.+36     	; 0x24e <GPIO_SetPinValue+0x38>
 22a:	28 f0       	brcs	.+10     	; 0x236 <GPIO_SetPinValue+0x20>
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	d9 f0       	breq	.+54     	; 0x266 <GPIO_SetPinValue+0x50>
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	29 f1       	breq	.+74     	; 0x27e <GPIO_SetPinValue+0x68>
 234:	72 c0       	rjmp	.+228    	; 0x31a <GPIO_SetPinValue+0x104>
			{
			case GPIO_PORTA: SET_BIT(PORTA,Copy_u8PIN); break;
 236:	2b b3       	in	r18, 0x1b	; 27
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <GPIO_SetPinValue+0x2c>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <GPIO_SetPinValue+0x28>
 246:	82 2b       	or	r24, r18
 248:	8b bb       	out	0x1b, r24	; 27
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 24a:	81 e0       	ldi	r24, 0x01	; 1
		if (Copy_u8Value == GPIO_PIN_HIGH)
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case GPIO_PORTA: SET_BIT(PORTA,Copy_u8PIN); break;
 24c:	08 95       	ret
			case GPIO_PORTB: SET_BIT(PORTB,Copy_u8PIN); break;
 24e:	28 b3       	in	r18, 0x18	; 24
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <GPIO_SetPinValue+0x44>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <GPIO_SetPinValue+0x40>
 25e:	82 2b       	or	r24, r18
 260:	88 bb       	out	0x18, r24	; 24
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 262:	81 e0       	ldi	r24, 0x01	; 1
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case GPIO_PORTA: SET_BIT(PORTA,Copy_u8PIN); break;
			case GPIO_PORTB: SET_BIT(PORTB,Copy_u8PIN); break;
 264:	08 95       	ret
			case GPIO_PORTC: SET_BIT(PORTC,Copy_u8PIN); break;
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <GPIO_SetPinValue+0x5c>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <GPIO_SetPinValue+0x58>
 276:	82 2b       	or	r24, r18
 278:	85 bb       	out	0x15, r24	; 21
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 27a:	81 e0       	ldi	r24, 0x01	; 1
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case GPIO_PORTA: SET_BIT(PORTA,Copy_u8PIN); break;
			case GPIO_PORTB: SET_BIT(PORTB,Copy_u8PIN); break;
			case GPIO_PORTC: SET_BIT(PORTC,Copy_u8PIN); break;
 27c:	08 95       	ret
			case GPIO_PORTD: SET_BIT(PORTD,Copy_u8PIN); break;
 27e:	22 b3       	in	r18, 0x12	; 18
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <GPIO_SetPinValue+0x74>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <GPIO_SetPinValue+0x70>
 28e:	82 2b       	or	r24, r18
 290:	82 bb       	out	0x12, r24	; 18
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 292:	81 e0       	ldi	r24, 0x01	; 1
			switch (Copy_u8PORT)
			{
			case GPIO_PORTA: SET_BIT(PORTA,Copy_u8PIN); break;
			case GPIO_PORTB: SET_BIT(PORTB,Copy_u8PIN); break;
			case GPIO_PORTC: SET_BIT(PORTC,Copy_u8PIN); break;
			case GPIO_PORTD: SET_BIT(PORTD,Copy_u8PIN); break;
 294:	08 95       	ret
			}

		}

		else if (Copy_u8Value == GPIO_PIN_LOW)
 296:	41 11       	cpse	r20, r1
 298:	42 c0       	rjmp	.+132    	; 0x31e <GPIO_SetPinValue+0x108>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	99 f0       	breq	.+38     	; 0x2c4 <GPIO_SetPinValue+0xae>
 29e:	28 f0       	brcs	.+10     	; 0x2aa <GPIO_SetPinValue+0x94>
 2a0:	82 30       	cpi	r24, 0x02	; 2
 2a2:	e9 f0       	breq	.+58     	; 0x2de <GPIO_SetPinValue+0xc8>
 2a4:	83 30       	cpi	r24, 0x03	; 3
 2a6:	41 f1       	breq	.+80     	; 0x2f8 <GPIO_SetPinValue+0xe2>
 2a8:	3c c0       	rjmp	.+120    	; 0x322 <GPIO_SetPinValue+0x10c>
			{
			case GPIO_PORTA: CLR_BIT(PORTA,Copy_u8PIN); break;
 2aa:	2b b3       	in	r18, 0x1b	; 27
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <GPIO_SetPinValue+0xa0>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <GPIO_SetPinValue+0x9c>
 2ba:	80 95       	com	r24
 2bc:	82 23       	and	r24, r18
 2be:	8b bb       	out	0x1b, r24	; 27
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
		else if (Copy_u8Value == GPIO_PIN_LOW)
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case GPIO_PORTA: CLR_BIT(PORTA,Copy_u8PIN); break;
 2c2:	08 95       	ret
			case GPIO_PORTB: CLR_BIT(PORTB,Copy_u8PIN); break;
 2c4:	28 b3       	in	r18, 0x18	; 24
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <GPIO_SetPinValue+0xba>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <GPIO_SetPinValue+0xb6>
 2d4:	80 95       	com	r24
 2d6:	82 23       	and	r24, r18
 2d8:	88 bb       	out	0x18, r24	; 24
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 2da:	81 e0       	ldi	r24, 0x01	; 1
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case GPIO_PORTA: CLR_BIT(PORTA,Copy_u8PIN); break;
			case GPIO_PORTB: CLR_BIT(PORTB,Copy_u8PIN); break;
 2dc:	08 95       	ret
			case GPIO_PORTC: CLR_BIT(PORTC,Copy_u8PIN); break;
 2de:	25 b3       	in	r18, 0x15	; 21
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <GPIO_SetPinValue+0xd4>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	6a 95       	dec	r22
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <GPIO_SetPinValue+0xd0>
 2ee:	80 95       	com	r24
 2f0:	82 23       	and	r24, r18
 2f2:	85 bb       	out	0x15, r24	; 21
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case GPIO_PORTA: CLR_BIT(PORTA,Copy_u8PIN); break;
			case GPIO_PORTB: CLR_BIT(PORTB,Copy_u8PIN); break;
			case GPIO_PORTC: CLR_BIT(PORTC,Copy_u8PIN); break;
 2f6:	08 95       	ret
			case GPIO_PORTD: CLR_BIT(PORTD,Copy_u8PIN); break;
 2f8:	22 b3       	in	r18, 0x12	; 18
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <GPIO_SetPinValue+0xee>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	6a 95       	dec	r22
 306:	e2 f7       	brpl	.-8      	; 0x300 <GPIO_SetPinValue+0xea>
 308:	80 95       	com	r24
 30a:	82 23       	and	r24, r18
 30c:	82 bb       	out	0x12, r24	; 18
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 30e:	81 e0       	ldi	r24, 0x01	; 1
			switch (Copy_u8PORT)
			{
			case GPIO_PORTA: CLR_BIT(PORTA,Copy_u8PIN); break;
			case GPIO_PORTB: CLR_BIT(PORTB,Copy_u8PIN); break;
			case GPIO_PORTC: CLR_BIT(PORTC,Copy_u8PIN); break;
			case GPIO_PORTD: CLR_BIT(PORTD,Copy_u8PIN); break;
 310:	08 95       	ret
		}
	}

	else
	{
		LOC_enumState = GPIO_NOK ;
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	08 95       	ret
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	08 95       	ret
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	08 95       	ret
			}
		}

		else
		{
			LOC_enumState = GPIO_NOK ;
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	08 95       	ret
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 322:	81 e0       	ldi	r24, 0x01	; 1
		LOC_enumState = GPIO_NOK ;
	}

	return LOC_enumState ;

}
 324:	08 95       	ret

00000326 <SPI_Init>:
{
	/*Data Order*/
	#if SPI_DATA_ORDER == SPI_DATA_LSB_FIRST
		SET_BIT(SPCR , SPCR_DORD) ;
	#elif SPI_DATA_ORDER == SPI_DATA_MSB_FIRST
		CLR_BIT(SPCR , SPCR_DORD) ;
 326:	8d b1       	in	r24, 0x0d	; 13
 328:	8f 7d       	andi	r24, 0xDF	; 223
 32a:	8d b9       	out	0x0d, r24	; 13
(MOSI) PB5
(MISO) PB6
(SCK) PB7*/
	/*Master/Slave Select*/
	#if SPI_MASTER_SLAVE_SELECT == SPI_MASTER
		SET_BIT(SPCR , SPCR_MSTR) ;
 32c:	8d b1       	in	r24, 0x0d	; 13
 32e:	80 61       	ori	r24, 0x10	; 16
 330:	8d b9       	out	0x0d, r24	; 13
		GPIO_SetPinDirection(GPIO_PORTB, GPIO_PIN4, GPIO_PIN_OUTPUT);
 332:	41 e0       	ldi	r20, 0x01	; 1
 334:	64 e0       	ldi	r22, 0x04	; 4
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 83 00 	call	0x106	; 0x106 <GPIO_SetPinDirection>
		GPIO_SetPinDirection(GPIO_PORTB, GPIO_PIN5, GPIO_PIN_OUTPUT);
 33c:	41 e0       	ldi	r20, 0x01	; 1
 33e:	65 e0       	ldi	r22, 0x05	; 5
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	0e 94 83 00 	call	0x106	; 0x106 <GPIO_SetPinDirection>
		GPIO_SetPinDirection(GPIO_PORTB, GPIO_PIN6, GPIO_PIN_INPUT);
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	66 e0       	ldi	r22, 0x06	; 6
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 83 00 	call	0x106	; 0x106 <GPIO_SetPinDirection>
		GPIO_SetPinDirection(GPIO_PORTB, GPIO_PIN7, GPIO_PIN_OUTPUT);
 350:	41 e0       	ldi	r20, 0x01	; 1
 352:	67 e0       	ldi	r22, 0x07	; 7
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 83 00 	call	0x106	; 0x106 <GPIO_SetPinDirection>
		#error "wrong SPI_MASTER_SLAVE_SELECT config"
	#endif

	/*Clock Polarity*/
	#if SPI_CLOCK_POLARITY == SPI_RISING_LEADING_FALLING_TRAILING
		CLR_BIT(SPCR , SPCR_CPOL) ;
 35a:	8d b1       	in	r24, 0x0d	; 13
 35c:	87 7f       	andi	r24, 0xF7	; 247
 35e:	8d b9       	out	0x0d, r24	; 13
		#error "wrong SPI_CLOCK_POLARITY config"
	#endif

	/*Clock Phase*/
	#if SPI_CLOCK_PHASE == SPI_SAMPLE_LEADING_SETUP_TRAILING
		CLR_BIT(SPCR , SPCR_CPHA) ;
 360:	8d b1       	in	r24, 0x0d	; 13
 362:	8b 7f       	andi	r24, 0xFB	; 251
 364:	8d b9       	out	0x0d, r24	; 13
	#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_8
		SET_BIT(SPCR , SPCR_SPR0) ;
		CLR_BIT(SPCR , SPCR_SPR1) ;
		SET_BIT(SPSR , SPSR_SPI2X) ;
	#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_16
		SET_BIT(SPCR , SPCR_SPR0) ;
 366:	8d b1       	in	r24, 0x0d	; 13
 368:	81 60       	ori	r24, 0x01	; 1
 36a:	8d b9       	out	0x0d, r24	; 13
		CLR_BIT(SPCR , SPCR_SPR1) ;
 36c:	8d b1       	in	r24, 0x0d	; 13
 36e:	8d 7f       	andi	r24, 0xFD	; 253
 370:	8d b9       	out	0x0d, r24	; 13
		CLR_BIT(SPSR , SPSR_SPI2X) ;
 372:	8e b1       	in	r24, 0x0e	; 14
 374:	8e 7f       	andi	r24, 0xFE	; 254
 376:	8e b9       	out	0x0e, r24	; 14
		#error "wrong SPI_CLOCK_RATE config"
	#endif

	/*SPI Interrupt Enable*/
	#if SPI_INTERRUPT_ENABLE_MODE == SPI_INTERRUPT_DISABLE
		CLR_BIT(SPCR , SPCR_SPIE) ;
 378:	8d b1       	in	r24, 0x0d	; 13
 37a:	8f 77       	andi	r24, 0x7F	; 127
 37c:	8d b9       	out	0x0d, r24	; 13

	/*SPI Enable*/
	#if SPI_ENABLE_MODE == SPI_DISABLE
		CLR_BIT(SPCR , SPCR_SPE) ;
	#elif SPI_ENABLE_MODE == SPI_ENABLE
		SET_BIT(SPCR , SPCR_SPE) ;
 37e:	8d b1       	in	r24, 0x0d	; 13
 380:	80 64       	ori	r24, 0x40	; 64
 382:	8d b9       	out	0x0d, r24	; 13
 384:	08 95       	ret

00000386 <SPI_SendData>:
u8  SPI_SendData (u8 Copy_u8Data)
{
	u8 Local_u8ErrorState = NOK ;
	u32 Local_uint32TimeoutCounter = 0 ;

	if (SPI_u8State == IDLE)
 386:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 38a:	91 30       	cpi	r25, 0x01	; 1
 38c:	f1 f4       	brne	.+60     	; 0x3ca <SPI_SendData+0x44>
	{
		SPI_u8State = BUSY ;
 38e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>

		SPDR = Copy_u8Data ;
 392:	8f b9       	out	0x0f, r24	; 15
}

u8  SPI_SendData (u8 Copy_u8Data)
{
	u8 Local_u8ErrorState = NOK ;
	u32 Local_uint32TimeoutCounter = 0 ;
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	dc 01       	movw	r26, r24
	{
		SPI_u8State = BUSY ;

		SPDR = Copy_u8Data ;

		while ( ( (GET_BIT(SPSR , SPSR_SPIF)) == 0) && (Local_uint32TimeoutCounter < SPI_uint32TIMEOUT) )
 39a:	03 c0       	rjmp	.+6      	; 0x3a2 <SPI_SendData+0x1c>
		{
			Local_uint32TimeoutCounter++ ;
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	a1 1d       	adc	r26, r1
 3a0:	b1 1d       	adc	r27, r1
	{
		SPI_u8State = BUSY ;

		SPDR = Copy_u8Data ;

		while ( ( (GET_BIT(SPSR , SPSR_SPIF)) == 0) && (Local_uint32TimeoutCounter < SPI_uint32TIMEOUT) )
 3a2:	77 99       	sbic	0x0e, 7	; 14
 3a4:	06 c0       	rjmp	.+12     	; 0x3b2 <SPI_SendData+0x2c>
 3a6:	80 31       	cpi	r24, 0x10	; 16
 3a8:	27 e2       	ldi	r18, 0x27	; 39
 3aa:	92 07       	cpc	r25, r18
 3ac:	a1 05       	cpc	r26, r1
 3ae:	b1 05       	cpc	r27, r1
 3b0:	a8 f3       	brcs	.-22     	; 0x39c <SPI_SendData+0x16>
		{
			Local_uint32TimeoutCounter++ ;
		}
		if (Local_uint32TimeoutCounter == SPI_uint32TIMEOUT)
 3b2:	80 31       	cpi	r24, 0x10	; 16
 3b4:	97 42       	sbci	r25, 0x27	; 39
 3b6:	a1 05       	cpc	r26, r1
 3b8:	b1 05       	cpc	r27, r1
 3ba:	11 f4       	brne	.+4      	; 0x3c0 <SPI_SendData+0x3a>
		{
			Local_u8ErrorState = TIMEOUT_STATE ;
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	01 c0       	rjmp	.+2      	; 0x3c2 <SPI_SendData+0x3c>
		}
		else
		{
			Local_u8ErrorState = OK ;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
		}
		SPI_u8State = IDLE ;
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
 3c8:	08 95       	ret
	}
	else
	{
		Local_u8ErrorState = BUSY_STATE ;
 3ca:	83 e0       	ldi	r24, 0x03	; 3
	}

	return Local_u8ErrorState ;
	
}
 3cc:	08 95       	ret

000003ce <_exit>:
 3ce:	f8 94       	cli

000003d0 <__stop_program>:
 3d0:	ff cf       	rjmp	.-2      	; 0x3d0 <__stop_program>
