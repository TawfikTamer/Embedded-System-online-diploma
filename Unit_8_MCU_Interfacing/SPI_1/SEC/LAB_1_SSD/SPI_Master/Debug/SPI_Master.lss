
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000033c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000033c  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cee  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c6  00000000  00000000  000011ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b77  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000013c  00000000  00000000  0000250c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000577  00000000  00000000  00002648  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dc4  00000000  00000000  00002bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003983  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 9c 01 	jmp	0x338	; 0x338 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

#define F_CPU 1000000UL
#include <util/delay.h>

int main()
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	1f 92       	push	r1
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
	SPI_Init();
  8c:	0e 94 1f 01 	call	0x23e	; 0x23e <SPI_Init>
	GPIO_SetPortDirection(GPIO_PORTA,GPIO_PORT_OUTPUT);
  90:	6f ef       	ldi	r22, 0xFF	; 255
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <GPIO_SetPortDirection>
	u8 ch,data;
	for(ch = 0 ; ch <= 255 ; ch++)
  98:	10 e0       	ldi	r17, 0x00	; 0
	{
		SPI_SendData(ch);
  9a:	81 2f       	mov	r24, r17
  9c:	0e 94 4f 01 	call	0x29e	; 0x29e <SPI_SendData>
		SPI_RecevieData(&data);
  a0:	ce 01       	movw	r24, r28
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SPI_RecevieData>
		GPIO_SetPortValue(GPIO_PORTA,data);
  a8:	69 81       	ldd	r22, Y+1	; 0x01
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 05 01 	call	0x20a	; 0x20a <GPIO_SetPortValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f e3       	ldi	r18, 0x3F	; 63
  b2:	8d e0       	ldi	r24, 0x0D	; 13
  b4:	93 e0       	ldi	r25, 0x03	; 3
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x34>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x3e>
  c0:	00 00       	nop
int main()
{
	SPI_Init();
	GPIO_SetPortDirection(GPIO_PORTA,GPIO_PORT_OUTPUT);
	u8 ch,data;
	for(ch = 0 ; ch <= 255 ; ch++)
  c2:	1f 5f       	subi	r17, 0xFF	; 255
  c4:	ea cf       	rjmp	.-44     	; 0x9a <main+0x18>

000000c6 <GPIO_SetPinDirection>:
	}

	return LOC_enumState ;


}
  c6:	84 30       	cpi	r24, 0x04	; 4
  c8:	08 f0       	brcs	.+2      	; 0xcc <GPIO_SetPinDirection+0x6>
  ca:	7b c0       	rjmp	.+246    	; 0x1c2 <GPIO_SetPinDirection+0xfc>
  cc:	68 30       	cpi	r22, 0x08	; 8
  ce:	08 f0       	brcs	.+2      	; 0xd2 <GPIO_SetPinDirection+0xc>
  d0:	7a c0       	rjmp	.+244    	; 0x1c6 <GPIO_SetPinDirection+0x100>
  d2:	41 30       	cpi	r20, 0x01	; 1
  d4:	c1 f5       	brne	.+112    	; 0x146 <GPIO_SetPinDirection+0x80>
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	91 f0       	breq	.+36     	; 0xfe <GPIO_SetPinDirection+0x38>
  da:	28 f0       	brcs	.+10     	; 0xe6 <GPIO_SetPinDirection+0x20>
  dc:	82 30       	cpi	r24, 0x02	; 2
  de:	d9 f0       	breq	.+54     	; 0x116 <GPIO_SetPinDirection+0x50>
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	29 f1       	breq	.+74     	; 0x12e <GPIO_SetPinDirection+0x68>
  e4:	72 c0       	rjmp	.+228    	; 0x1ca <GPIO_SetPinDirection+0x104>
  e6:	2a b3       	in	r18, 0x1a	; 26
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <GPIO_SetPinDirection+0x2c>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <GPIO_SetPinDirection+0x28>
  f6:	82 2b       	or	r24, r18
  f8:	8a bb       	out	0x1a, r24	; 26
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	08 95       	ret
  fe:	27 b3       	in	r18, 0x17	; 23
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <GPIO_SetPinDirection+0x44>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <GPIO_SetPinDirection+0x40>
 10e:	82 2b       	or	r24, r18
 110:	87 bb       	out	0x17, r24	; 23
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	08 95       	ret
 116:	24 b3       	in	r18, 0x14	; 20
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <GPIO_SetPinDirection+0x5c>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <GPIO_SetPinDirection+0x58>
 126:	82 2b       	or	r24, r18
 128:	84 bb       	out	0x14, r24	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	08 95       	ret
 12e:	21 b3       	in	r18, 0x11	; 17
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <GPIO_SetPinDirection+0x74>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <GPIO_SetPinDirection+0x70>
 13e:	82 2b       	or	r24, r18
 140:	81 bb       	out	0x11, r24	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	08 95       	ret
 146:	41 11       	cpse	r20, r1
 148:	42 c0       	rjmp	.+132    	; 0x1ce <GPIO_SetPinDirection+0x108>
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	99 f0       	breq	.+38     	; 0x174 <GPIO_SetPinDirection+0xae>
 14e:	28 f0       	brcs	.+10     	; 0x15a <GPIO_SetPinDirection+0x94>
 150:	82 30       	cpi	r24, 0x02	; 2
 152:	e9 f0       	breq	.+58     	; 0x18e <GPIO_SetPinDirection+0xc8>
 154:	83 30       	cpi	r24, 0x03	; 3
 156:	41 f1       	breq	.+80     	; 0x1a8 <GPIO_SetPinDirection+0xe2>
 158:	3c c0       	rjmp	.+120    	; 0x1d2 <GPIO_SetPinDirection+0x10c>
 15a:	2a b3       	in	r18, 0x1a	; 26
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <GPIO_SetPinDirection+0xa0>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <GPIO_SetPinDirection+0x9c>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	8a bb       	out	0x1a, r24	; 26
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	08 95       	ret
 174:	27 b3       	in	r18, 0x17	; 23
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <GPIO_SetPinDirection+0xba>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <GPIO_SetPinDirection+0xb6>
 184:	80 95       	com	r24
 186:	82 23       	and	r24, r18
 188:	87 bb       	out	0x17, r24	; 23
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	08 95       	ret
 18e:	24 b3       	in	r18, 0x14	; 20
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <GPIO_SetPinDirection+0xd4>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <GPIO_SetPinDirection+0xd0>
 19e:	80 95       	com	r24
 1a0:	82 23       	and	r24, r18
 1a2:	84 bb       	out	0x14, r24	; 20
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	08 95       	ret
 1a8:	21 b3       	in	r18, 0x11	; 17
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <GPIO_SetPinDirection+0xee>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <GPIO_SetPinDirection+0xea>
 1b8:	80 95       	com	r24
 1ba:	82 23       	and	r24, r18
 1bc:	81 bb       	out	0x11, r24	; 17
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	08 95       	ret
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	08 95       	ret
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	08 95       	ret
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	08 95       	ret
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	08 95       	ret
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	08 95       	ret

000001d6 <GPIO_SetPortDirection>:
GPIO_ErrorStatus GPIO_SetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;

	if ( (Copy_u8PORT <= GPIO_PORTD) )
 1d6:	84 30       	cpi	r24, 0x04	; 4
 1d8:	a0 f4       	brcc	.+40     	; 0x202 <GPIO_SetPortDirection+0x2c>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	49 f0       	breq	.+18     	; 0x1f0 <GPIO_SetPortDirection+0x1a>
 1de:	28 f0       	brcs	.+10     	; 0x1ea <GPIO_SetPortDirection+0x14>
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	49 f0       	breq	.+18     	; 0x1f6 <GPIO_SetPortDirection+0x20>
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	51 f0       	breq	.+20     	; 0x1fc <GPIO_SetPortDirection+0x26>
 1e8:	0e c0       	rjmp	.+28     	; 0x206 <GPIO_SetPortDirection+0x30>
		{
		case     GPIO_PORTA: DDRA = Copy_u8Direction; break;
 1ea:	6a bb       	out	0x1a, r22	; 26
 * return :  its status
 */
GPIO_ErrorStatus GPIO_SetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
	if ( (Copy_u8PORT <= GPIO_PORTD) )
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     GPIO_PORTA: DDRA = Copy_u8Direction; break;
 1ee:	08 95       	ret
		case     GPIO_PORTB: DDRB = Copy_u8Direction; break;
 1f0:	67 bb       	out	0x17, r22	; 23
 * return :  its status
 */
GPIO_ErrorStatus GPIO_SetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     GPIO_PORTA: DDRA = Copy_u8Direction; break;
		case     GPIO_PORTB: DDRB = Copy_u8Direction; break;
 1f4:	08 95       	ret
		case     GPIO_PORTC: DDRC = Copy_u8Direction; break;
 1f6:	64 bb       	out	0x14, r22	; 20
 * return :  its status
 */
GPIO_ErrorStatus GPIO_SetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     GPIO_PORTA: DDRA = Copy_u8Direction; break;
		case     GPIO_PORTB: DDRB = Copy_u8Direction; break;
		case     GPIO_PORTC: DDRC = Copy_u8Direction; break;
 1fa:	08 95       	ret
		case     GPIO_PORTD: DDRD = Copy_u8Direction; break;
 1fc:	61 bb       	out	0x11, r22	; 17
 * return :  its status
 */
GPIO_ErrorStatus GPIO_SetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
		switch (Copy_u8PORT)
		{
		case     GPIO_PORTA: DDRA = Copy_u8Direction; break;
		case     GPIO_PORTB: DDRB = Copy_u8Direction; break;
		case     GPIO_PORTC: DDRC = Copy_u8Direction; break;
		case     GPIO_PORTD: DDRD = Copy_u8Direction; break;
 200:	08 95       	ret
		default: LOC_enumState =  GPIO_NOK;    break;
		}	
	}
	else
	{
		LOC_enumState = GPIO_NOK;
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	08 95       	ret
		{
		case     GPIO_PORTA: DDRA = Copy_u8Direction; break;
		case     GPIO_PORTB: DDRB = Copy_u8Direction; break;
		case     GPIO_PORTC: DDRC = Copy_u8Direction; break;
		case     GPIO_PORTD: DDRD = Copy_u8Direction; break;
		default: LOC_enumState =  GPIO_NOK;    break;
 206:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		LOC_enumState = GPIO_NOK;
	}
	return LOC_enumState ;
}
 208:	08 95       	ret

0000020a <GPIO_SetPortValue>:
GPIO_ErrorStatus GPIO_SetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;

	if ( (Copy_u8PORT <= GPIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==GPIO_PORT_LOW) || (Copy_u8Value==GPIO_PORT_HIGH) ) )
 20a:	84 30       	cpi	r24, 0x04	; 4
 20c:	a0 f4       	brcc	.+40     	; 0x236 <GPIO_SetPortValue+0x2c>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
 20e:	81 30       	cpi	r24, 0x01	; 1
 210:	49 f0       	breq	.+18     	; 0x224 <GPIO_SetPortValue+0x1a>
 212:	28 f0       	brcs	.+10     	; 0x21e <GPIO_SetPortValue+0x14>
 214:	82 30       	cpi	r24, 0x02	; 2
 216:	49 f0       	breq	.+18     	; 0x22a <GPIO_SetPortValue+0x20>
 218:	83 30       	cpi	r24, 0x03	; 3
 21a:	51 f0       	breq	.+20     	; 0x230 <GPIO_SetPortValue+0x26>
 21c:	0e c0       	rjmp	.+28     	; 0x23a <GPIO_SetPortValue+0x30>
		{
		case     GPIO_PORTA: PORTA = Copy_u8Value; break;
 21e:	6b bb       	out	0x1b, r22	; 27
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 220:	81 e0       	ldi	r24, 0x01	; 1
	if ( (Copy_u8PORT <= GPIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==GPIO_PORT_LOW) || (Copy_u8Value==GPIO_PORT_HIGH) ) )
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     GPIO_PORTA: PORTA = Copy_u8Value; break;
 222:	08 95       	ret
		case     GPIO_PORTB: PORTB = Copy_u8Value; break;
 224:	68 bb       	out	0x18, r22	; 24
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 226:	81 e0       	ldi	r24, 0x01	; 1
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     GPIO_PORTA: PORTA = Copy_u8Value; break;
		case     GPIO_PORTB: PORTB = Copy_u8Value; break;
 228:	08 95       	ret
		case     GPIO_PORTC: PORTC = Copy_u8Value; break;
 22a:	65 bb       	out	0x15, r22	; 21
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 22c:	81 e0       	ldi	r24, 0x01	; 1
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     GPIO_PORTA: PORTA = Copy_u8Value; break;
		case     GPIO_PORTB: PORTB = Copy_u8Value; break;
		case     GPIO_PORTC: PORTC = Copy_u8Value; break;
 22e:	08 95       	ret
		case     GPIO_PORTD: PORTD = Copy_u8Value; break;
 230:	62 bb       	out	0x12, r22	; 18
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 232:	81 e0       	ldi	r24, 0x01	; 1
		switch (Copy_u8PORT)
		{
		case     GPIO_PORTA: PORTA = Copy_u8Value; break;
		case     GPIO_PORTB: PORTB = Copy_u8Value; break;
		case     GPIO_PORTC: PORTC = Copy_u8Value; break;
		case     GPIO_PORTD: PORTD = Copy_u8Value; break;
 234:	08 95       	ret
		default: LOC_enumState = GPIO_NOK;       break;
		}	
	}
	else
	{
		LOC_enumState = GPIO_NOK;
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	08 95       	ret
		{
		case     GPIO_PORTA: PORTA = Copy_u8Value; break;
		case     GPIO_PORTB: PORTB = Copy_u8Value; break;
		case     GPIO_PORTC: PORTC = Copy_u8Value; break;
		case     GPIO_PORTD: PORTD = Copy_u8Value; break;
		default: LOC_enumState = GPIO_NOK;       break;
 23a:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		LOC_enumState = GPIO_NOK;
	}
	return LOC_enumState ;
}
 23c:	08 95       	ret

0000023e <SPI_Init>:
{
	/*Data Order*/
	#if SPI_DATA_ORDER == SPI_DATA_LSB_FIRST
		SET_BIT(SPCR , SPCR_DORD) ;
	#elif SPI_DATA_ORDER == SPI_DATA_MSB_FIRST
		CLR_BIT(SPCR , SPCR_DORD) ;
 23e:	8d b1       	in	r24, 0x0d	; 13
 240:	8f 7d       	andi	r24, 0xDF	; 223
 242:	8d b9       	out	0x0d, r24	; 13
(MISO) PB6
(SCK) PB7*/

	/*Master/Slave Select*/
	#if SPI_MASTER_SLAVE_SELECT == SPI_MASTER
		SET_BIT(SPCR , SPCR_MSTR) ;
 244:	8d b1       	in	r24, 0x0d	; 13
 246:	80 61       	ori	r24, 0x10	; 16
 248:	8d b9       	out	0x0d, r24	; 13
		GPIO_SetPinDirection(GPIO_PORTB, GPIO_PIN4, GPIO_PIN_OUTPUT);
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	64 e0       	ldi	r22, 0x04	; 4
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_SetPinDirection>
		GPIO_SetPinDirection(GPIO_PORTB, GPIO_PIN5, GPIO_PIN_OUTPUT);
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	65 e0       	ldi	r22, 0x05	; 5
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_SetPinDirection>
		GPIO_SetPinDirection(GPIO_PORTB, GPIO_PIN6, GPIO_PIN_INPUT);
 25e:	40 e0       	ldi	r20, 0x00	; 0
 260:	66 e0       	ldi	r22, 0x06	; 6
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_SetPinDirection>
		GPIO_SetPinDirection(GPIO_PORTB, GPIO_PIN7, GPIO_PIN_OUTPUT);
 268:	41 e0       	ldi	r20, 0x01	; 1
 26a:	67 e0       	ldi	r22, 0x07	; 7
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_SetPinDirection>
		#error "wrong SPI_MASTER_SLAVE_SELECT config"
	#endif

	/*Clock Polarity*/
	#if SPI_CLOCK_POLARITY == SPI_RISING_LEADING_FALLING_TRAILING
		CLR_BIT(SPCR , SPCR_CPOL) ;
 272:	8d b1       	in	r24, 0x0d	; 13
 274:	87 7f       	andi	r24, 0xF7	; 247
 276:	8d b9       	out	0x0d, r24	; 13
		#error "wrong SPI_CLOCK_POLARITY config"
	#endif

	/*Clock Phase*/
	#if SPI_CLOCK_PHASE == SPI_SAMPLE_LEADING_SETUP_TRAILING
		CLR_BIT(SPCR , SPCR_CPHA) ;
 278:	8d b1       	in	r24, 0x0d	; 13
 27a:	8b 7f       	andi	r24, 0xFB	; 251
 27c:	8d b9       	out	0x0d, r24	; 13
	#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_8
		SET_BIT(SPCR , SPCR_SPR0) ;
		CLR_BIT(SPCR , SPCR_SPR1) ;
		SET_BIT(SPSR , SPSR_SPI2X) ;
	#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_16
		SET_BIT(SPCR , SPCR_SPR0) ;
 27e:	8d b1       	in	r24, 0x0d	; 13
 280:	81 60       	ori	r24, 0x01	; 1
 282:	8d b9       	out	0x0d, r24	; 13
		CLR_BIT(SPCR , SPCR_SPR1) ;
 284:	8d b1       	in	r24, 0x0d	; 13
 286:	8d 7f       	andi	r24, 0xFD	; 253
 288:	8d b9       	out	0x0d, r24	; 13
		CLR_BIT(SPSR , SPSR_SPI2X) ;
 28a:	8e b1       	in	r24, 0x0e	; 14
 28c:	8e 7f       	andi	r24, 0xFE	; 254
 28e:	8e b9       	out	0x0e, r24	; 14
		#error "wrong SPI_CLOCK_RATE config"
	#endif

	/*SPI Interrupt Enable*/
	#if SPI_INTERRUPT_ENABLE_MODE == SPI_INTERRUPT_DISABLE
		CLR_BIT(SPCR , SPCR_SPIE) ;
 290:	8d b1       	in	r24, 0x0d	; 13
 292:	8f 77       	andi	r24, 0x7F	; 127
 294:	8d b9       	out	0x0d, r24	; 13

	/*SPI Enable*/
	#if SPI_ENABLE_MODE == SPI_DISABLE
		CLR_BIT(SPCR , SPCR_SPE) ;
	#elif SPI_ENABLE_MODE == SPI_ENABLE
		SET_BIT(SPCR , SPCR_SPE) ;
 296:	8d b1       	in	r24, 0x0d	; 13
 298:	80 64       	ori	r24, 0x40	; 64
 29a:	8d b9       	out	0x0d, r24	; 13
 29c:	08 95       	ret

0000029e <SPI_SendData>:
u8  SPI_SendData (u8 Copy_u8Data)
{
	u8 Local_u8ErrorState = NOK ;
	u32 Local_uint32TimeoutCounter = 0 ;

	if (SPI_u8State == IDLE)
 29e:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2a2:	91 30       	cpi	r25, 0x01	; 1
 2a4:	f9 f4       	brne	.+62     	; 0x2e4 <SPI_SendData+0x46>
	{
		SPI_u8State = BUSY ;
 2a6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		SPDR = Copy_u8Data ;
 2aa:	8f b9       	out	0x0f, r24	; 15
}

u8  SPI_SendData (u8 Copy_u8Data)
{
	u8 Local_u8ErrorState = NOK ;
	u32 Local_uint32TimeoutCounter = 0 ;
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	dc 01       	movw	r26, r24
	if (SPI_u8State == IDLE)
	{
		SPI_u8State = BUSY ;
		SPDR = Copy_u8Data ;

		while ( ( (GET_BIT(SPSR , SPSR_SPIF)) == 0) && (Local_uint32TimeoutCounter < SPI_uint32TIMEOUT) )
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <SPI_SendData+0x1c>
		{
			Local_uint32TimeoutCounter++ ;
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	a1 1d       	adc	r26, r1
 2b8:	b1 1d       	adc	r27, r1
	if (SPI_u8State == IDLE)
	{
		SPI_u8State = BUSY ;
		SPDR = Copy_u8Data ;

		while ( ( (GET_BIT(SPSR , SPSR_SPIF)) == 0) && (Local_uint32TimeoutCounter < SPI_uint32TIMEOUT) )
 2ba:	77 99       	sbic	0x0e, 7	; 14
 2bc:	07 c0       	rjmp	.+14     	; 0x2cc <SPI_SendData+0x2e>
 2be:	80 3a       	cpi	r24, 0xA0	; 160
 2c0:	26 e8       	ldi	r18, 0x86	; 134
 2c2:	92 07       	cpc	r25, r18
 2c4:	21 e0       	ldi	r18, 0x01	; 1
 2c6:	a2 07       	cpc	r26, r18
 2c8:	b1 05       	cpc	r27, r1
 2ca:	a0 f3       	brcs	.-24     	; 0x2b4 <SPI_SendData+0x16>
		{
			Local_uint32TimeoutCounter++ ;
		}
		if (Local_uint32TimeoutCounter == SPI_uint32TIMEOUT)
 2cc:	80 3a       	cpi	r24, 0xA0	; 160
 2ce:	96 48       	sbci	r25, 0x86	; 134
 2d0:	a1 40       	sbci	r26, 0x01	; 1
 2d2:	b1 05       	cpc	r27, r1
 2d4:	11 f4       	brne	.+4      	; 0x2da <SPI_SendData+0x3c>
		{
			Local_u8ErrorState = TIMEOUT_STATE ;
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	01 c0       	rjmp	.+2      	; 0x2dc <SPI_SendData+0x3e>
		}
		else
		{
			Local_u8ErrorState = OK ;
 2da:	81 e0       	ldi	r24, 0x01	; 1
		}
		SPI_u8State = IDLE ;
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
 2e2:	08 95       	ret
	}
	else
	{
		Local_u8ErrorState = BUSY_STATE ;
 2e4:	83 e0       	ldi	r24, 0x03	; 3
	}

	return Local_u8ErrorState ;
	
}
 2e6:	08 95       	ret

000002e8 <SPI_RecevieData>:


u8  SPI_RecevieData (u8 * Copy_u8ReceviedData) 
{
 2e8:	fc 01       	movw	r30, r24
	u8 Local_u8ErrorState = NOK ;
	u32 Local_uint32TimeoutCounter = 0 ;

	if (SPI_u8State == IDLE)
 2ea:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ee:	91 30       	cpi	r25, 0x01	; 1
 2f0:	09 f5       	brne	.+66     	; 0x334 <SPI_RecevieData+0x4c>
	{
		SPI_u8State = BUSY ;
 2f2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>


u8  SPI_RecevieData (u8 * Copy_u8ReceviedData) 
{
	u8 Local_u8ErrorState = NOK ;
	u32 Local_uint32TimeoutCounter = 0 ;
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	ba 01       	movw	r22, r20

	if (SPI_u8State == IDLE)
	{
		SPI_u8State = BUSY ;

		while ( ( (GET_BIT(SPSR , SPSR_SPIF)) == 0) && (Local_uint32TimeoutCounter < SPI_uint32TIMEOUT) )
 2fc:	04 c0       	rjmp	.+8      	; 0x306 <SPI_RecevieData+0x1e>
		{
			Local_uint32TimeoutCounter++ ;
 2fe:	4f 5f       	subi	r20, 0xFF	; 255
 300:	5f 4f       	sbci	r21, 0xFF	; 255
 302:	6f 4f       	sbci	r22, 0xFF	; 255
 304:	7f 4f       	sbci	r23, 0xFF	; 255

	if (SPI_u8State == IDLE)
	{
		SPI_u8State = BUSY ;

		while ( ( (GET_BIT(SPSR , SPSR_SPIF)) == 0) && (Local_uint32TimeoutCounter < SPI_uint32TIMEOUT) )
 306:	77 99       	sbic	0x0e, 7	; 14
 308:	07 c0       	rjmp	.+14     	; 0x318 <SPI_RecevieData+0x30>
 30a:	40 3a       	cpi	r20, 0xA0	; 160
 30c:	86 e8       	ldi	r24, 0x86	; 134
 30e:	58 07       	cpc	r21, r24
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	68 07       	cpc	r22, r24
 314:	71 05       	cpc	r23, r1
 316:	98 f3       	brcs	.-26     	; 0x2fe <SPI_RecevieData+0x16>
		{
			Local_uint32TimeoutCounter++ ;
		}
		if (Local_uint32TimeoutCounter == SPI_uint32TIMEOUT)
 318:	40 3a       	cpi	r20, 0xA0	; 160
 31a:	56 48       	sbci	r21, 0x86	; 134
 31c:	61 40       	sbci	r22, 0x01	; 1
 31e:	71 05       	cpc	r23, r1
 320:	21 f0       	breq	.+8      	; 0x32a <SPI_RecevieData+0x42>
		{
			Local_u8ErrorState = TIMEOUT_STATE ;
		}
		else
		{
			* Copy_u8ReceviedData = SPDR ;
 322:	8f b1       	in	r24, 0x0f	; 15
 324:	80 83       	st	Z, r24
			Local_u8ErrorState = OK ;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	01 c0       	rjmp	.+2      	; 0x32c <SPI_RecevieData+0x44>
		{
			Local_uint32TimeoutCounter++ ;
		}
		if (Local_uint32TimeoutCounter == SPI_uint32TIMEOUT)
		{
			Local_u8ErrorState = TIMEOUT_STATE ;
 32a:	82 e0       	ldi	r24, 0x02	; 2
		else
		{
			* Copy_u8ReceviedData = SPDR ;
			Local_u8ErrorState = OK ;
		}
		SPI_u8State = IDLE ;
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
 332:	08 95       	ret
	}
	else
	{
		Local_u8ErrorState = BUSY_STATE ;
 334:	83 e0       	ldi	r24, 0x03	; 3
	}

	return Local_u8ErrorState ;
}
 336:	08 95       	ret

00000338 <_exit>:
 338:	f8 94       	cli

0000033a <__stop_program>:
 33a:	ff cf       	rjmp	.-2      	; 0x33a <__stop_program>
