
USART ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000069a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000069a  0000072e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800062  00800062  00000730  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a5  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d3  00000000  00000000  00001f91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001086  00000000  00000000  00002964  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  000039ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d1  00000000  00000000  00003da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d4f  00000000  00000000  00004571  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000062c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 cc 02 	jmp	0x598	; 0x598 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 0c 03 	jmp	0x618	; 0x618 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 01 01 	call	0x202	; 0x202 <main>
  8a:	0c 94 4b 03 	jmp	0x696	; 0x696 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CLCD_SendFallingEdge>:

		CLCD_SendData( LOC_u8Iterator );

	}

}
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 a6 01 	call	0x34c	; 0x34c <DIO_SetPinValue>
  9c:	8f ec       	ldi	r24, 0xCF	; 207
  9e:	97 e0       	ldi	r25, 0x07	; 7
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <CLCD_SendFallingEdge+0xe>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <CLCD_SendFallingEdge+0x14>
  a6:	00 00       	nop
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	63 e0       	ldi	r22, 0x03	; 3
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0e 94 a6 01 	call	0x34c	; 0x34c <DIO_SetPinValue>
  b2:	8f ec       	ldi	r24, 0xCF	; 207
  b4:	97 e0       	ldi	r25, 0x07	; 7
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <CLCD_SendFallingEdge+0x24>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <CLCD_SendFallingEdge+0x2a>
  bc:	00 00       	nop
  be:	08 95       	ret

000000c0 <CLCD_SendData>:
  c0:	cf 93       	push	r28
  c2:	c8 2f       	mov	r28, r24
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 a6 01 	call	0x34c	; 0x34c <DIO_SetPinValue>
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	62 e0       	ldi	r22, 0x02	; 2
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 a6 01 	call	0x34c	; 0x34c <DIO_SetPinValue>
  d8:	6c 2f       	mov	r22, r28
  da:	62 95       	swap	r22
  dc:	6f 70       	andi	r22, 0x0F	; 15
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 2e 02 	call	0x45c	; 0x45c <DIO_WriteHighNibbles>
  e4:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_SendFallingEdge>
  e8:	6c 2f       	mov	r22, r28
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	0e 94 2e 02 	call	0x45c	; 0x45c <DIO_WriteHighNibbles>
  f0:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_SendFallingEdge>
  f4:	8f ec       	ldi	r24, 0xCF	; 207
  f6:	97 e0       	ldi	r25, 0x07	; 7
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <CLCD_SendData+0x38>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <CLCD_SendData+0x3e>
  fe:	00 00       	nop
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <CLCD_SendCommand>:
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 a6 01 	call	0x34c	; 0x34c <DIO_SetPinValue>
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	62 e0       	ldi	r22, 0x02	; 2
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 a6 01 	call	0x34c	; 0x34c <DIO_SetPinValue>
 11c:	6c 2f       	mov	r22, r28
 11e:	62 95       	swap	r22
 120:	6f 70       	andi	r22, 0x0F	; 15
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 2e 02 	call	0x45c	; 0x45c <DIO_WriteHighNibbles>
 128:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_SendFallingEdge>
 12c:	6c 2f       	mov	r22, r28
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 2e 02 	call	0x45c	; 0x45c <DIO_WriteHighNibbles>
 134:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_SendFallingEdge>
 138:	8f ec       	ldi	r24, 0xCF	; 207
 13a:	97 e0       	ldi	r25, 0x07	; 7
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <CLCD_SendCommand+0x38>
 140:	00 c0       	rjmp	.+0      	; 0x142 <CLCD_SendCommand+0x3e>
 142:	00 00       	nop
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <CLCD_ClearScreen>:
* Parameters : nothing
* return : nothing
*/
void CLCD_ClearScreen(void)
{
	CLCD_SendCommand(lcd_Clear);
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 82 00 	call	0x104	; 0x104 <CLCD_SendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	8f e1       	ldi	r24, 0x1F	; 31
 150:	9e e4       	ldi	r25, 0x4E	; 78
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <CLCD_ClearScreen+0xa>
 156:	00 c0       	rjmp	.+0      	; 0x158 <CLCD_ClearScreen+0x10>
 158:	00 00       	nop
 15a:	08 95       	ret

0000015c <CLCD_Init>:
 15c:	2f e7       	ldi	r18, 0x7F	; 127
 15e:	88 e3       	ldi	r24, 0x38	; 56
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <CLCD_Init+0x6>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <CLCD_Init+0x10>
 16c:	00 00       	nop

	#elif   CLCD_MODE == 4

	// 1- must wait more than 30 ms before any action (VDD rises to 4.5 v)
	_delay_ms(50);
	DIO_SetPinDirection      (CLCD_DATA_PORT,DIO_PIN4,DIO_PIN_OUTPUT);
 16e:	41 e0       	ldi	r20, 0x01	; 1
 170:	64 e0       	ldi	r22, 0x04	; 4
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinDirection>
	DIO_SetPinDirection      (CLCD_DATA_PORT,DIO_PIN5,DIO_PIN_OUTPUT);
 178:	41 e0       	ldi	r20, 0x01	; 1
 17a:	65 e0       	ldi	r22, 0x05	; 5
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinDirection>
	DIO_SetPinDirection      (CLCD_DATA_PORT,DIO_PIN6,DIO_PIN_OUTPUT);
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	66 e0       	ldi	r22, 0x06	; 6
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinDirection>
	DIO_SetPinDirection      (CLCD_DATA_PORT,DIO_PIN7,DIO_PIN_OUTPUT);
 18c:	41 e0       	ldi	r20, 0x01	; 1
 18e:	67 e0       	ldi	r22, 0x07	; 7
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinDirection>
	DIO_SetPinDirection  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_OUTPUT  );
 196:	41 e0       	ldi	r20, 0x01	; 1
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinDirection>
	DIO_SetPinDirection  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_OUTPUT  );
 1a0:	41 e0       	ldi	r20, 0x01	; 1
 1a2:	62 e0       	ldi	r22, 0x02	; 2
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinDirection>
	DIO_SetPinDirection  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_OUTPUT  );
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	63 e0       	ldi	r22, 0x03	; 3
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinDirection>



	/*return home*/
	CLCD_SendCommand( lcd_Home );
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	0e 94 82 00 	call	0x104	; 0x104 <CLCD_SendCommand>
 1ba:	8f e5       	ldi	r24, 0x5F	; 95
 1bc:	9a ee       	ldi	r25, 0xEA	; 234
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <CLCD_Init+0x62>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <CLCD_Init+0x68>
 1c4:	00 00       	nop
	_delay_ms(30);

	/*FUNCTION SET Command*/
	CLCD_SendCommand( FOUR_BITS ); // 4 Bit Mode
 1c6:	88 e2       	ldi	r24, 0x28	; 40
 1c8:	0e 94 82 00 	call	0x104	; 0x104 <CLCD_SendCommand>
 1cc:	8f ec       	ldi	r24, 0xCF	; 207
 1ce:	97 e0       	ldi	r25, 0x07	; 7
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <CLCD_Init+0x74>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <CLCD_Init+0x7a>
 1d6:	00 00       	nop
	_delay_ms(1);

	/* DISPLAY & Cursor (ON / OFF) Control */
	CLCD_SendCommand( CLCD_DisplayMode );
 1d8:	8f e0       	ldi	r24, 0x0F	; 15
 1da:	0e 94 82 00 	call	0x104	; 0x104 <CLCD_SendCommand>
 1de:	8f ec       	ldi	r24, 0xCF	; 207
 1e0:	97 e0       	ldi	r25, 0x07	; 7
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <CLCD_Init+0x86>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <CLCD_Init+0x8c>
 1e8:	00 00       	nop
	_delay_ms(1);

	/* DISPLAY CLEAR */
	CLCD_ClearScreen();
 1ea:	0e 94 a4 00 	call	0x148	; 0x148 <CLCD_ClearScreen>

	/* ENTRY MODE  Set*/
	CLCD_SendCommand( lcd_EntryMode );
 1ee:	86 e0       	ldi	r24, 0x06	; 6
 1f0:	0e 94 82 00 	call	0x104	; 0x104 <CLCD_SendCommand>
 1f4:	8f ec       	ldi	r24, 0xCF	; 207
 1f6:	97 e0       	ldi	r25, 0x07	; 7
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <CLCD_Init+0x9c>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <CLCD_Init+0xa2>
 1fe:	00 00       	nop
 200:	08 95       	ret

00000202 <main>:
#include "MCAL/DIO/DIO_interface.h"
#include "MCAL/USART/USART_interface.h"
#include "HAL/LCD/CLCD_interface.h"

int main(void)
{
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	1f 92       	push	r1
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
	CLCD_Init();
 20c:	0e 94 ae 00 	call	0x15c	; 0x15c <CLCD_Init>
	USART_Init();
 210:	0e 94 5e 02 	call	0x4bc	; 0x4bc <USART_Init>
	u8 data;
	USART_SendData('A');
 214:	81 e4       	ldi	r24, 0x41	; 65
 216:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <USART_SendData>
	
	while (1)
	{
		USART_RecevieData(&data);
 21a:	ce 01       	movw	r24, r28
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	0e 94 a2 02 	call	0x544	; 0x544 <USART_RecevieData>
		if(data != '\0')
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	88 23       	and	r24, r24
 226:	41 f0       	breq	.+16     	; 0x238 <main+0x36>
		{
			if(data == 0x0D)
 228:	8d 30       	cpi	r24, 0x0D	; 13
 22a:	21 f4       	brne	.+8      	; 0x234 <main+0x32>
			{
				CLCD_SendCommand(lcd_MoveToSecLine);
 22c:	80 ec       	ldi	r24, 0xC0	; 192
 22e:	0e 94 82 00 	call	0x104	; 0x104 <CLCD_SendCommand>
 232:	02 c0       	rjmp	.+4      	; 0x238 <main+0x36>
			}
			else
			CLCD_SendData(data);
 234:	0e 94 60 00 	call	0xc0	; 0xc0 <CLCD_SendData>
		}
		data = '\0';
 238:	19 82       	std	Y+1, r1	; 0x01

	}
 23a:	ef cf       	rjmp	.-34     	; 0x21a <main+0x18>

0000023c <DIO_SetPinDirection>:
	{
		LOC_enumState = DIO_NOK;
	}

	return LOC_enumState ;
}
 23c:	84 30       	cpi	r24, 0x04	; 4
 23e:	08 f0       	brcs	.+2      	; 0x242 <DIO_SetPinDirection+0x6>
 240:	7b c0       	rjmp	.+246    	; 0x338 <DIO_SetPinDirection+0xfc>
 242:	68 30       	cpi	r22, 0x08	; 8
 244:	08 f0       	brcs	.+2      	; 0x248 <DIO_SetPinDirection+0xc>
 246:	7a c0       	rjmp	.+244    	; 0x33c <DIO_SetPinDirection+0x100>
 248:	41 30       	cpi	r20, 0x01	; 1
 24a:	c1 f5       	brne	.+112    	; 0x2bc <DIO_SetPinDirection+0x80>
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	91 f0       	breq	.+36     	; 0x274 <DIO_SetPinDirection+0x38>
 250:	28 f0       	brcs	.+10     	; 0x25c <DIO_SetPinDirection+0x20>
 252:	82 30       	cpi	r24, 0x02	; 2
 254:	d9 f0       	breq	.+54     	; 0x28c <DIO_SetPinDirection+0x50>
 256:	83 30       	cpi	r24, 0x03	; 3
 258:	29 f1       	breq	.+74     	; 0x2a4 <DIO_SetPinDirection+0x68>
 25a:	72 c0       	rjmp	.+228    	; 0x340 <DIO_SetPinDirection+0x104>
 25c:	2a b3       	in	r18, 0x1a	; 26
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_SetPinDirection+0x2c>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_SetPinDirection+0x28>
 26c:	82 2b       	or	r24, r18
 26e:	8a bb       	out	0x1a, r24	; 26
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	08 95       	ret
 274:	27 b3       	in	r18, 0x17	; 23
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_SetPinDirection+0x44>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_SetPinDirection+0x40>
 284:	82 2b       	or	r24, r18
 286:	87 bb       	out	0x17, r24	; 23
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	08 95       	ret
 28c:	24 b3       	in	r18, 0x14	; 20
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_SetPinDirection+0x5c>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_SetPinDirection+0x58>
 29c:	82 2b       	or	r24, r18
 29e:	84 bb       	out	0x14, r24	; 20
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	08 95       	ret
 2a4:	21 b3       	in	r18, 0x11	; 17
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_SetPinDirection+0x74>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_SetPinDirection+0x70>
 2b4:	82 2b       	or	r24, r18
 2b6:	81 bb       	out	0x11, r24	; 17
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	08 95       	ret
 2bc:	41 11       	cpse	r20, r1
 2be:	42 c0       	rjmp	.+132    	; 0x344 <DIO_SetPinDirection+0x108>
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	99 f0       	breq	.+38     	; 0x2ea <DIO_SetPinDirection+0xae>
 2c4:	28 f0       	brcs	.+10     	; 0x2d0 <DIO_SetPinDirection+0x94>
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	e9 f0       	breq	.+58     	; 0x304 <DIO_SetPinDirection+0xc8>
 2ca:	83 30       	cpi	r24, 0x03	; 3
 2cc:	41 f1       	breq	.+80     	; 0x31e <DIO_SetPinDirection+0xe2>
 2ce:	3c c0       	rjmp	.+120    	; 0x348 <DIO_SetPinDirection+0x10c>
 2d0:	2a b3       	in	r18, 0x1a	; 26
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_SetPinDirection+0xa0>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_SetPinDirection+0x9c>
 2e0:	80 95       	com	r24
 2e2:	82 23       	and	r24, r18
 2e4:	8a bb       	out	0x1a, r24	; 26
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	08 95       	ret
 2ea:	27 b3       	in	r18, 0x17	; 23
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_SetPinDirection+0xba>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	6a 95       	dec	r22
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_SetPinDirection+0xb6>
 2fa:	80 95       	com	r24
 2fc:	82 23       	and	r24, r18
 2fe:	87 bb       	out	0x17, r24	; 23
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	08 95       	ret
 304:	24 b3       	in	r18, 0x14	; 20
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_SetPinDirection+0xd4>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_SetPinDirection+0xd0>
 314:	80 95       	com	r24
 316:	82 23       	and	r24, r18
 318:	84 bb       	out	0x14, r24	; 20
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	08 95       	ret
 31e:	21 b3       	in	r18, 0x11	; 17
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_SetPinDirection+0xee>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_SetPinDirection+0xea>
 32e:	80 95       	com	r24
 330:	82 23       	and	r24, r18
 332:	81 bb       	out	0x11, r24	; 17
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	08 95       	ret
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	08 95       	ret
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	08 95       	ret
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	08 95       	ret
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	08 95       	ret
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	08 95       	ret

0000034c <DIO_SetPinValue>:
 34c:	84 30       	cpi	r24, 0x04	; 4
 34e:	08 f0       	brcs	.+2      	; 0x352 <DIO_SetPinValue+0x6>
 350:	7b c0       	rjmp	.+246    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 352:	68 30       	cpi	r22, 0x08	; 8
 354:	08 f0       	brcs	.+2      	; 0x358 <DIO_SetPinValue+0xc>
 356:	7a c0       	rjmp	.+244    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 358:	41 30       	cpi	r20, 0x01	; 1
 35a:	c1 f5       	brne	.+112    	; 0x3cc <DIO_SetPinValue+0x80>
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	91 f0       	breq	.+36     	; 0x384 <DIO_SetPinValue+0x38>
 360:	28 f0       	brcs	.+10     	; 0x36c <DIO_SetPinValue+0x20>
 362:	82 30       	cpi	r24, 0x02	; 2
 364:	d9 f0       	breq	.+54     	; 0x39c <DIO_SetPinValue+0x50>
 366:	83 30       	cpi	r24, 0x03	; 3
 368:	29 f1       	breq	.+74     	; 0x3b4 <DIO_SetPinValue+0x68>
 36a:	72 c0       	rjmp	.+228    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 36c:	2b b3       	in	r18, 0x1b	; 27
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_SetPinValue+0x2c>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	6a 95       	dec	r22
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_SetPinValue+0x28>
 37c:	82 2b       	or	r24, r18
 37e:	8b bb       	out	0x1b, r24	; 27
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	08 95       	ret
 384:	28 b3       	in	r18, 0x18	; 24
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_SetPinValue+0x44>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_SetPinValue+0x40>
 394:	82 2b       	or	r24, r18
 396:	88 bb       	out	0x18, r24	; 24
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	08 95       	ret
 39c:	25 b3       	in	r18, 0x15	; 21
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_SetPinValue+0x5c>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_SetPinValue+0x58>
 3ac:	82 2b       	or	r24, r18
 3ae:	85 bb       	out	0x15, r24	; 21
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	08 95       	ret
 3b4:	22 b3       	in	r18, 0x12	; 18
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_SetPinValue+0x74>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_SetPinValue+0x70>
 3c4:	82 2b       	or	r24, r18
 3c6:	82 bb       	out	0x12, r24	; 18
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	08 95       	ret
 3cc:	41 11       	cpse	r20, r1
 3ce:	42 c0       	rjmp	.+132    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	99 f0       	breq	.+38     	; 0x3fa <DIO_SetPinValue+0xae>
 3d4:	28 f0       	brcs	.+10     	; 0x3e0 <DIO_SetPinValue+0x94>
 3d6:	82 30       	cpi	r24, 0x02	; 2
 3d8:	e9 f0       	breq	.+58     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3da:	83 30       	cpi	r24, 0x03	; 3
 3dc:	41 f1       	breq	.+80     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 3de:	3c c0       	rjmp	.+120    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 3e0:	2b b3       	in	r18, 0x1b	; 27
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_SetPinValue+0xa0>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_SetPinValue+0x9c>
 3f0:	80 95       	com	r24
 3f2:	82 23       	and	r24, r18
 3f4:	8b bb       	out	0x1b, r24	; 27
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	08 95       	ret
 3fa:	28 b3       	in	r18, 0x18	; 24
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	6a 95       	dec	r22
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	80 95       	com	r24
 40c:	82 23       	and	r24, r18
 40e:	88 bb       	out	0x18, r24	; 24
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	08 95       	ret
 414:	25 b3       	in	r18, 0x15	; 21
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	6a 95       	dec	r22
 422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 424:	80 95       	com	r24
 426:	82 23       	and	r24, r18
 428:	85 bb       	out	0x15, r24	; 21
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	08 95       	ret
 42e:	22 b3       	in	r18, 0x12	; 18
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	6a 95       	dec	r22
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	80 95       	com	r24
 440:	82 23       	and	r24, r18
 442:	82 bb       	out	0x12, r24	; 18
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	08 95       	ret
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	08 95       	ret
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	08 95       	ret
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	08 95       	ret
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	08 95       	ret
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	08 95       	ret

0000045c <DIO_WriteHighNibbles>:
DIO_ErrorStatus DIO_WriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ( (Copy_u8PORT <= DIO_PORTD))
 45c:	84 30       	cpi	r24, 0x04	; 4
 45e:	50 f5       	brcc	.+84     	; 0x4b4 <DIO_WriteHighNibbles+0x58>
	{
		Copy_u8value = (Copy_u8value<<4) ;
 460:	62 95       	swap	r22
 462:	60 7f       	andi	r22, 0xF0	; 240
		switch(Copy_u8PORT)
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	71 f0       	breq	.+28     	; 0x484 <DIO_WriteHighNibbles+0x28>
 468:	28 f0       	brcs	.+10     	; 0x474 <DIO_WriteHighNibbles+0x18>
 46a:	82 30       	cpi	r24, 0x02	; 2
 46c:	99 f0       	breq	.+38     	; 0x494 <DIO_WriteHighNibbles+0x38>
 46e:	83 30       	cpi	r24, 0x03	; 3
 470:	c9 f0       	breq	.+50     	; 0x4a4 <DIO_WriteHighNibbles+0x48>
 472:	22 c0       	rjmp	.+68     	; 0x4b8 <DIO_WriteHighNibbles+0x5c>
		{
		case DIO_PORTA :
			PORTA&=0x0f;                   // make sure the high bits = 0000
 474:	8b b3       	in	r24, 0x1b	; 27
 476:	8f 70       	andi	r24, 0x0F	; 15
 478:	8b bb       	out	0x1b, r24	; 27
			PORTA|=Copy_u8value;			//Set only the high nibble of the port A by the given value
 47a:	8b b3       	in	r24, 0x1b	; 27
 47c:	68 2b       	or	r22, r24
 47e:	6b bb       	out	0x1b, r22	; 27
 *
 */
DIO_ErrorStatus DIO_WriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 480:	81 e0       	ldi	r24, 0x01	; 1
		switch(Copy_u8PORT)
		{
		case DIO_PORTA :
			PORTA&=0x0f;                   // make sure the high bits = 0000
			PORTA|=Copy_u8value;			//Set only the high nibble of the port A by the given value
			break ;
 482:	08 95       	ret
		case DIO_PORTB:
			PORTB&=0x0f;                 //Set only the high nibble of the port B by the given value
 484:	88 b3       	in	r24, 0x18	; 24
 486:	8f 70       	andi	r24, 0x0F	; 15
 488:	88 bb       	out	0x18, r24	; 24
			PORTB|=Copy_u8value;
 48a:	88 b3       	in	r24, 0x18	; 24
 48c:	68 2b       	or	r22, r24
 48e:	68 bb       	out	0x18, r22	; 24
 *
 */
DIO_ErrorStatus DIO_WriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 490:	81 e0       	ldi	r24, 0x01	; 1
			PORTA|=Copy_u8value;			//Set only the high nibble of the port A by the given value
			break ;
		case DIO_PORTB:
			PORTB&=0x0f;                 //Set only the high nibble of the port B by the given value
			PORTB|=Copy_u8value;
			break ;
 492:	08 95       	ret
		case DIO_PORTC :
			PORTC&=0x0f;                 //Set only the high nibble of the port C by the given value
 494:	85 b3       	in	r24, 0x15	; 21
 496:	8f 70       	andi	r24, 0x0F	; 15
 498:	85 bb       	out	0x15, r24	; 21
			PORTC|=Copy_u8value;
 49a:	85 b3       	in	r24, 0x15	; 21
 49c:	68 2b       	or	r22, r24
 49e:	65 bb       	out	0x15, r22	; 21
 *
 */
DIO_ErrorStatus DIO_WriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 4a0:	81 e0       	ldi	r24, 0x01	; 1
			PORTB|=Copy_u8value;
			break ;
		case DIO_PORTC :
			PORTC&=0x0f;                 //Set only the high nibble of the port C by the given value
			PORTC|=Copy_u8value;
			break ;
 4a2:	08 95       	ret
		case DIO_PORTD:
			PORTD&=0x0f;                 //Set only the high nibble of the port D by the given value
 4a4:	82 b3       	in	r24, 0x12	; 18
 4a6:	8f 70       	andi	r24, 0x0F	; 15
 4a8:	82 bb       	out	0x12, r24	; 18
			PORTD|=Copy_u8value;
 4aa:	82 b3       	in	r24, 0x12	; 18
 4ac:	68 2b       	or	r22, r24
 4ae:	62 bb       	out	0x12, r22	; 18
 *
 */
DIO_ErrorStatus DIO_WriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 4b0:	81 e0       	ldi	r24, 0x01	; 1
			PORTC|=Copy_u8value;
			break ;
		case DIO_PORTD:
			PORTD&=0x0f;                 //Set only the high nibble of the port D by the given value
			PORTD|=Copy_u8value;
			break ;
 4b2:	08 95       	ret

		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	08 95       	ret
 *
 */
DIO_ErrorStatus DIO_WriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 4b8:	81 e0       	ldi	r24, 0x01	; 1
		LOC_enumState = DIO_NOK;
	}

	return LOC_enumState ;

}
 4ba:	08 95       	ret

000004bc <USART_Init>:
	{
		Local_u8ErrorState = BUSY_STATE ;
	}

	return Local_u8ErrorState ;
}
 4bc:	10 bc       	out	0x20, r1	; 32
 4be:	83 e3       	ldi	r24, 0x33	; 51
 4c0:	89 b9       	out	0x09, r24	; 9
 4c2:	8b b1       	in	r24, 0x0b	; 11
 4c4:	8d 7f       	andi	r24, 0xFD	; 253
 4c6:	8b b9       	out	0x0b, r24	; 11
 4c8:	8b b1       	in	r24, 0x0b	; 11
 4ca:	8e 7f       	andi	r24, 0xFE	; 254
 4cc:	8b b9       	out	0x0b, r24	; 11
 4ce:	8a b1       	in	r24, 0x0a	; 10
 4d0:	8b 7f       	andi	r24, 0xFB	; 251
 4d2:	8a b9       	out	0x0a, r24	; 10
 4d4:	86 e8       	ldi	r24, 0x86	; 134
 4d6:	80 bd       	out	0x20, r24	; 32
 4d8:	8a b1       	in	r24, 0x0a	; 10
 4da:	8f 77       	andi	r24, 0x7F	; 127
 4dc:	8a b9       	out	0x0a, r24	; 10
 4de:	8a b1       	in	r24, 0x0a	; 10
 4e0:	8f 7b       	andi	r24, 0xBF	; 191
 4e2:	8a b9       	out	0x0a, r24	; 10
 4e4:	8a b1       	in	r24, 0x0a	; 10
 4e6:	8f 7d       	andi	r24, 0xDF	; 223
 4e8:	8a b9       	out	0x0a, r24	; 10
 4ea:	8a b1       	in	r24, 0x0a	; 10
 4ec:	80 61       	ori	r24, 0x10	; 16
 4ee:	8a b9       	out	0x0a, r24	; 10
 4f0:	8a b1       	in	r24, 0x0a	; 10
 4f2:	88 60       	ori	r24, 0x08	; 8
 4f4:	8a b9       	out	0x0a, r24	; 10
 4f6:	08 95       	ret

000004f8 <USART_SendData>:
 4f8:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4fc:	91 30       	cpi	r25, 0x01	; 1
 4fe:	01 f5       	brne	.+64     	; 0x540 <USART_SendData+0x48>
 500:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 504:	40 e0       	ldi	r20, 0x00	; 0
 506:	50 e0       	ldi	r21, 0x00	; 0
 508:	ba 01       	movw	r22, r20
 50a:	04 c0       	rjmp	.+8      	; 0x514 <USART_SendData+0x1c>
 50c:	4f 5f       	subi	r20, 0xFF	; 255
 50e:	5f 4f       	sbci	r21, 0xFF	; 255
 510:	6f 4f       	sbci	r22, 0xFF	; 255
 512:	7f 4f       	sbci	r23, 0xFF	; 255
 514:	5d 99       	sbic	0x0b, 5	; 11
 516:	07 c0       	rjmp	.+14     	; 0x526 <USART_SendData+0x2e>
 518:	40 3a       	cpi	r20, 0xA0	; 160
 51a:	96 e8       	ldi	r25, 0x86	; 134
 51c:	59 07       	cpc	r21, r25
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	69 07       	cpc	r22, r25
 522:	71 05       	cpc	r23, r1
 524:	99 f7       	brne	.-26     	; 0x50c <USART_SendData+0x14>
 526:	40 3a       	cpi	r20, 0xA0	; 160
 528:	56 48       	sbci	r21, 0x86	; 134
 52a:	61 40       	sbci	r22, 0x01	; 1
 52c:	71 05       	cpc	r23, r1
 52e:	19 f0       	breq	.+6      	; 0x536 <USART_SendData+0x3e>
 530:	8c b9       	out	0x0c, r24	; 12
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	01 c0       	rjmp	.+2      	; 0x538 <USART_SendData+0x40>
 536:	82 e0       	ldi	r24, 0x02	; 2
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
 53e:	08 95       	ret
 540:	83 e0       	ldi	r24, 0x03	; 3
 542:	08 95       	ret

00000544 <USART_RecevieData>:
 544:	00 97       	sbiw	r24, 0x00	; 0
 546:	21 f1       	breq	.+72     	; 0x590 <USART_RecevieData+0x4c>
 548:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 54c:	21 30       	cpi	r18, 0x01	; 1
 54e:	11 f5       	brne	.+68     	; 0x594 <USART_RecevieData+0x50>
 550:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 554:	40 e0       	ldi	r20, 0x00	; 0
 556:	50 e0       	ldi	r21, 0x00	; 0
 558:	ba 01       	movw	r22, r20
 55a:	04 c0       	rjmp	.+8      	; 0x564 <USART_RecevieData+0x20>
 55c:	4f 5f       	subi	r20, 0xFF	; 255
 55e:	5f 4f       	sbci	r21, 0xFF	; 255
 560:	6f 4f       	sbci	r22, 0xFF	; 255
 562:	7f 4f       	sbci	r23, 0xFF	; 255
 564:	5f 99       	sbic	0x0b, 7	; 11
 566:	07 c0       	rjmp	.+14     	; 0x576 <USART_RecevieData+0x32>
 568:	40 3a       	cpi	r20, 0xA0	; 160
 56a:	26 e8       	ldi	r18, 0x86	; 134
 56c:	52 07       	cpc	r21, r18
 56e:	21 e0       	ldi	r18, 0x01	; 1
 570:	62 07       	cpc	r22, r18
 572:	71 05       	cpc	r23, r1
 574:	99 f7       	brne	.-26     	; 0x55c <USART_RecevieData+0x18>
 576:	40 3a       	cpi	r20, 0xA0	; 160
 578:	56 48       	sbci	r21, 0x86	; 134
 57a:	61 40       	sbci	r22, 0x01	; 1
 57c:	71 05       	cpc	r23, r1
 57e:	19 f0       	breq	.+6      	; 0x586 <USART_RecevieData+0x42>
 580:	2c b1       	in	r18, 0x0c	; 12
 582:	fc 01       	movw	r30, r24
 584:	20 83       	st	Z, r18
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 58c:	82 e0       	ldi	r24, 0x02	; 2
 58e:	08 95       	ret
 590:	84 e0       	ldi	r24, 0x04	; 4
 592:	08 95       	ret
 594:	83 e0       	ldi	r24, 0x03	; 3
 596:	08 95       	ret

00000598 <__vector_13>:

//-------------------------------------------------------------------------------------------------------------------------------
/* ISR for RX complete */
void __vector_13 (void)		__attribute__ ((signal)) ;
void __vector_13 (void)
{
 598:	1f 92       	push	r1
 59a:	0f 92       	push	r0
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	0f 92       	push	r0
 5a0:	11 24       	eor	r1, r1
 5a2:	2f 93       	push	r18
 5a4:	3f 93       	push	r19
 5a6:	4f 93       	push	r20
 5a8:	5f 93       	push	r21
 5aa:	6f 93       	push	r22
 5ac:	7f 93       	push	r23
 5ae:	8f 93       	push	r24
 5b0:	9f 93       	push	r25
 5b2:	af 93       	push	r26
 5b4:	bf 93       	push	r27
 5b6:	ef 93       	push	r30
 5b8:	ff 93       	push	r31
	/*Receive next Data*/
	USART_pu8ReceiveData[USART_u8Index] = UDR ;
 5ba:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <USART_u8Index>
 5be:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <USART_pu8ReceiveData>
 5c2:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <USART_pu8ReceiveData+0x1>
 5c6:	e8 0f       	add	r30, r24
 5c8:	f1 1d       	adc	r31, r1
 5ca:	9c b1       	in	r25, 0x0c	; 12
 5cc:	90 83       	st	Z, r25

	/*Increment Data index of the buffer*/
	USART_u8Index++ ;
 5ce:	8f 5f       	subi	r24, 0xFF	; 255
 5d0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <USART_u8Index>

	if (USART_u8Index == USART_u8BufferSize)
 5d4:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <USART_u8BufferSize>
 5d8:	89 13       	cpse	r24, r25
 5da:	0d c0       	rjmp	.+26     	; 0x5f6 <__vector_13+0x5e>
	{
		/*Send Data Complete*/

		USART_u8Index=0;
 5dc:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <USART_u8Index>
		/*USART is now IDLE*/
		USART_u8State = IDLE ;
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

		/*Call Notification Function*/
		USART_pvNotificationFunc() ;
 5e6:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 5ea:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
 5ee:	09 95       	icall

		/*USART Recieve Interrupt Disable*/
		CLR_BIT(UCSRB , UCSRB_RXCIE) ;
 5f0:	8a b1       	in	r24, 0x0a	; 10
 5f2:	8f 77       	andi	r24, 0x7F	; 127
 5f4:	8a b9       	out	0x0a, r24	; 10
	}
	else
	{
		/*Do Noting*/
	}
}
 5f6:	ff 91       	pop	r31
 5f8:	ef 91       	pop	r30
 5fa:	bf 91       	pop	r27
 5fc:	af 91       	pop	r26
 5fe:	9f 91       	pop	r25
 600:	8f 91       	pop	r24
 602:	7f 91       	pop	r23
 604:	6f 91       	pop	r22
 606:	5f 91       	pop	r21
 608:	4f 91       	pop	r20
 60a:	3f 91       	pop	r19
 60c:	2f 91       	pop	r18
 60e:	0f 90       	pop	r0
 610:	0f be       	out	0x3f, r0	; 63
 612:	0f 90       	pop	r0
 614:	1f 90       	pop	r1
 616:	18 95       	reti

00000618 <__vector_15>:

//-------------------------------------------------------------------------------------------------------------------------------
/* ISR for TX complete */
void __vector_15 (void)		__attribute__ ((signal)) ;
void __vector_15 (void)
{
 618:	1f 92       	push	r1
 61a:	0f 92       	push	r0
 61c:	0f b6       	in	r0, 0x3f	; 63
 61e:	0f 92       	push	r0
 620:	11 24       	eor	r1, r1
 622:	2f 93       	push	r18
 624:	3f 93       	push	r19
 626:	4f 93       	push	r20
 628:	5f 93       	push	r21
 62a:	6f 93       	push	r22
 62c:	7f 93       	push	r23
 62e:	8f 93       	push	r24
 630:	9f 93       	push	r25
 632:	af 93       	push	r26
 634:	bf 93       	push	r27
 636:	ef 93       	push	r30
 638:	ff 93       	push	r31

	/*Increment Data index of the buffer*/
	USART_u8Index++ ;
 63a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <USART_u8Index>
 63e:	8f 5f       	subi	r24, 0xFF	; 255
 640:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <USART_u8Index>

	if (USART_pu8SendData[USART_u8Index] == '\0')
 644:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <USART_pu8SendData>
 648:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <USART_pu8SendData+0x1>
 64c:	e8 0f       	add	r30, r24
 64e:	f1 1d       	adc	r31, r1
 650:	80 81       	ld	r24, Z
 652:	81 11       	cpse	r24, r1
 654:	0e c0       	rjmp	.+28     	; 0x672 <__vector_15+0x5a>
	{
		/*Receive Data Complete*/
		USART_u8Index=0;
 656:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <USART_u8Index>

		/*USART is now IDLE*/
		USART_u8State = IDLE ;
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

		/*Call Notification Function*/
		USART_pvNotificationFunc() ;
 660:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 664:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
 668:	09 95       	icall

		/*USART Transmit Interrupt Disable*/
		CLR_BIT(UCSRB , UCSRB_TXCIE) ;
 66a:	8a b1       	in	r24, 0x0a	; 10
 66c:	8f 7b       	andi	r24, 0xBF	; 191
 66e:	8a b9       	out	0x0a, r24	; 10
 670:	01 c0       	rjmp	.+2      	; 0x674 <__vector_15+0x5c>
	}
	else
	{
		/*Send Data not Complete*/
		/*Send next Data*/
		UDR = USART_pu8SendData[USART_u8Index] ;
 672:	8c b9       	out	0x0c, r24	; 12
	}
}
 674:	ff 91       	pop	r31
 676:	ef 91       	pop	r30
 678:	bf 91       	pop	r27
 67a:	af 91       	pop	r26
 67c:	9f 91       	pop	r25
 67e:	8f 91       	pop	r24
 680:	7f 91       	pop	r23
 682:	6f 91       	pop	r22
 684:	5f 91       	pop	r21
 686:	4f 91       	pop	r20
 688:	3f 91       	pop	r19
 68a:	2f 91       	pop	r18
 68c:	0f 90       	pop	r0
 68e:	0f be       	out	0x3f, r0	; 63
 690:	0f 90       	pop	r0
 692:	1f 90       	pop	r1
 694:	18 95       	reti

00000696 <_exit>:
 696:	f8 94       	cli

00000698 <__stop_program>:
 698:	ff cf       	rjmp	.-2      	; 0x698 <__stop_program>
