
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000032a  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c6a  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000751  00000000  00000000  00001136  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a9f  00000000  00000000  00001887  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000013c  00000000  00000000  00002328  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000532  00000000  00000000  00002464  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d7d  00000000  00000000  00002996  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003713  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 93 01 	jmp	0x326	; 0x326 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "MCAL/SPI/SPI_interface.h"

#define F_CPU 1000000UL

int main()
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	1f 92       	push	r1
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
	SPI_Init();
  8c:	0e 94 16 01 	call	0x22c	; 0x22c <SPI_Init>
	GPIO_SetPortDirection(GPIO_PORTA,GPIO_PORT_OUTPUT);
  90:	6f ef       	ldi	r22, 0xFF	; 255
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <GPIO_SetPortDirection>
	u8 ch,data;
	for(ch = 255 ; ch >= 0 ; ch--)
  98:	1f ef       	ldi	r17, 0xFF	; 255
	{
		SPI_RecevieData(&data);
  9a:	ce 01       	movw	r24, r28
  9c:	01 96       	adiw	r24, 0x01	; 1
  9e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <SPI_RecevieData>
		SPI_SendData(ch);
  a2:	81 2f       	mov	r24, r17
  a4:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_SendData>
		GPIO_SetPortValue(GPIO_PORTA,data);
  a8:	69 81       	ldd	r22, Y+1	; 0x01
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <GPIO_SetPortValue>
int main()
{
	SPI_Init();
	GPIO_SetPortDirection(GPIO_PORTA,GPIO_PORT_OUTPUT);
	u8 ch,data;
	for(ch = 255 ; ch >= 0 ; ch--)
  b0:	11 50       	subi	r17, 0x01	; 1
  b2:	f3 cf       	rjmp	.-26     	; 0x9a <main+0x18>

000000b4 <GPIO_SetPinDirection>:
	}

	return LOC_enumState ;


}
  b4:	84 30       	cpi	r24, 0x04	; 4
  b6:	08 f0       	brcs	.+2      	; 0xba <GPIO_SetPinDirection+0x6>
  b8:	7b c0       	rjmp	.+246    	; 0x1b0 <GPIO_SetPinDirection+0xfc>
  ba:	68 30       	cpi	r22, 0x08	; 8
  bc:	08 f0       	brcs	.+2      	; 0xc0 <GPIO_SetPinDirection+0xc>
  be:	7a c0       	rjmp	.+244    	; 0x1b4 <GPIO_SetPinDirection+0x100>
  c0:	41 30       	cpi	r20, 0x01	; 1
  c2:	c1 f5       	brne	.+112    	; 0x134 <GPIO_SetPinDirection+0x80>
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	91 f0       	breq	.+36     	; 0xec <GPIO_SetPinDirection+0x38>
  c8:	28 f0       	brcs	.+10     	; 0xd4 <GPIO_SetPinDirection+0x20>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	d9 f0       	breq	.+54     	; 0x104 <GPIO_SetPinDirection+0x50>
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	29 f1       	breq	.+74     	; 0x11c <GPIO_SetPinDirection+0x68>
  d2:	72 c0       	rjmp	.+228    	; 0x1b8 <GPIO_SetPinDirection+0x104>
  d4:	2a b3       	in	r18, 0x1a	; 26
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <GPIO_SetPinDirection+0x2c>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <GPIO_SetPinDirection+0x28>
  e4:	82 2b       	or	r24, r18
  e6:	8a bb       	out	0x1a, r24	; 26
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	08 95       	ret
  ec:	27 b3       	in	r18, 0x17	; 23
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <GPIO_SetPinDirection+0x44>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <GPIO_SetPinDirection+0x40>
  fc:	82 2b       	or	r24, r18
  fe:	87 bb       	out	0x17, r24	; 23
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	08 95       	ret
 104:	24 b3       	in	r18, 0x14	; 20
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <GPIO_SetPinDirection+0x5c>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <GPIO_SetPinDirection+0x58>
 114:	82 2b       	or	r24, r18
 116:	84 bb       	out	0x14, r24	; 20
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	08 95       	ret
 11c:	21 b3       	in	r18, 0x11	; 17
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <GPIO_SetPinDirection+0x74>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <GPIO_SetPinDirection+0x70>
 12c:	82 2b       	or	r24, r18
 12e:	81 bb       	out	0x11, r24	; 17
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	08 95       	ret
 134:	41 11       	cpse	r20, r1
 136:	42 c0       	rjmp	.+132    	; 0x1bc <GPIO_SetPinDirection+0x108>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	99 f0       	breq	.+38     	; 0x162 <GPIO_SetPinDirection+0xae>
 13c:	28 f0       	brcs	.+10     	; 0x148 <GPIO_SetPinDirection+0x94>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	e9 f0       	breq	.+58     	; 0x17c <GPIO_SetPinDirection+0xc8>
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	41 f1       	breq	.+80     	; 0x196 <GPIO_SetPinDirection+0xe2>
 146:	3c c0       	rjmp	.+120    	; 0x1c0 <GPIO_SetPinDirection+0x10c>
 148:	2a b3       	in	r18, 0x1a	; 26
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <GPIO_SetPinDirection+0xa0>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <GPIO_SetPinDirection+0x9c>
 158:	80 95       	com	r24
 15a:	82 23       	and	r24, r18
 15c:	8a bb       	out	0x1a, r24	; 26
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	08 95       	ret
 162:	27 b3       	in	r18, 0x17	; 23
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <GPIO_SetPinDirection+0xba>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <GPIO_SetPinDirection+0xb6>
 172:	80 95       	com	r24
 174:	82 23       	and	r24, r18
 176:	87 bb       	out	0x17, r24	; 23
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	08 95       	ret
 17c:	24 b3       	in	r18, 0x14	; 20
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <GPIO_SetPinDirection+0xd4>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <GPIO_SetPinDirection+0xd0>
 18c:	80 95       	com	r24
 18e:	82 23       	and	r24, r18
 190:	84 bb       	out	0x14, r24	; 20
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	08 95       	ret
 196:	21 b3       	in	r18, 0x11	; 17
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <GPIO_SetPinDirection+0xee>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <GPIO_SetPinDirection+0xea>
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	81 bb       	out	0x11, r24	; 17
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	08 95       	ret
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	08 95       	ret
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	08 95       	ret
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	08 95       	ret
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	08 95       	ret
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	08 95       	ret

000001c4 <GPIO_SetPortDirection>:
GPIO_ErrorStatus GPIO_SetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;

	if ( (Copy_u8PORT <= GPIO_PORTD) )
 1c4:	84 30       	cpi	r24, 0x04	; 4
 1c6:	a0 f4       	brcc	.+40     	; 0x1f0 <GPIO_SetPortDirection+0x2c>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	49 f0       	breq	.+18     	; 0x1de <GPIO_SetPortDirection+0x1a>
 1cc:	28 f0       	brcs	.+10     	; 0x1d8 <GPIO_SetPortDirection+0x14>
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	49 f0       	breq	.+18     	; 0x1e4 <GPIO_SetPortDirection+0x20>
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	51 f0       	breq	.+20     	; 0x1ea <GPIO_SetPortDirection+0x26>
 1d6:	0e c0       	rjmp	.+28     	; 0x1f4 <GPIO_SetPortDirection+0x30>
		{
		case     GPIO_PORTA: DDRA = Copy_u8Direction; break;
 1d8:	6a bb       	out	0x1a, r22	; 26
 * return :  its status
 */
GPIO_ErrorStatus GPIO_SetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 1da:	81 e0       	ldi	r24, 0x01	; 1
	if ( (Copy_u8PORT <= GPIO_PORTD) )
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     GPIO_PORTA: DDRA = Copy_u8Direction; break;
 1dc:	08 95       	ret
		case     GPIO_PORTB: DDRB = Copy_u8Direction; break;
 1de:	67 bb       	out	0x17, r22	; 23
 * return :  its status
 */
GPIO_ErrorStatus GPIO_SetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     GPIO_PORTA: DDRA = Copy_u8Direction; break;
		case     GPIO_PORTB: DDRB = Copy_u8Direction; break;
 1e2:	08 95       	ret
		case     GPIO_PORTC: DDRC = Copy_u8Direction; break;
 1e4:	64 bb       	out	0x14, r22	; 20
 * return :  its status
 */
GPIO_ErrorStatus GPIO_SetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     GPIO_PORTA: DDRA = Copy_u8Direction; break;
		case     GPIO_PORTB: DDRB = Copy_u8Direction; break;
		case     GPIO_PORTC: DDRC = Copy_u8Direction; break;
 1e8:	08 95       	ret
		case     GPIO_PORTD: DDRD = Copy_u8Direction; break;
 1ea:	61 bb       	out	0x11, r22	; 17
 * return :  its status
 */
GPIO_ErrorStatus GPIO_SetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
		switch (Copy_u8PORT)
		{
		case     GPIO_PORTA: DDRA = Copy_u8Direction; break;
		case     GPIO_PORTB: DDRB = Copy_u8Direction; break;
		case     GPIO_PORTC: DDRC = Copy_u8Direction; break;
		case     GPIO_PORTD: DDRD = Copy_u8Direction; break;
 1ee:	08 95       	ret
		default: LOC_enumState =  GPIO_NOK;    break;
		}	
	}
	else
	{
		LOC_enumState = GPIO_NOK;
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	08 95       	ret
		{
		case     GPIO_PORTA: DDRA = Copy_u8Direction; break;
		case     GPIO_PORTB: DDRB = Copy_u8Direction; break;
		case     GPIO_PORTC: DDRC = Copy_u8Direction; break;
		case     GPIO_PORTD: DDRD = Copy_u8Direction; break;
		default: LOC_enumState =  GPIO_NOK;    break;
 1f4:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		LOC_enumState = GPIO_NOK;
	}
	return LOC_enumState ;
}
 1f6:	08 95       	ret

000001f8 <GPIO_SetPortValue>:
GPIO_ErrorStatus GPIO_SetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;

	if ( (Copy_u8PORT <= GPIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==GPIO_PORT_LOW) || (Copy_u8Value==GPIO_PORT_HIGH) ) )
 1f8:	84 30       	cpi	r24, 0x04	; 4
 1fa:	a0 f4       	brcc	.+40     	; 0x224 <GPIO_SetPortValue+0x2c>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	49 f0       	breq	.+18     	; 0x212 <GPIO_SetPortValue+0x1a>
 200:	28 f0       	brcs	.+10     	; 0x20c <GPIO_SetPortValue+0x14>
 202:	82 30       	cpi	r24, 0x02	; 2
 204:	49 f0       	breq	.+18     	; 0x218 <GPIO_SetPortValue+0x20>
 206:	83 30       	cpi	r24, 0x03	; 3
 208:	51 f0       	breq	.+20     	; 0x21e <GPIO_SetPortValue+0x26>
 20a:	0e c0       	rjmp	.+28     	; 0x228 <GPIO_SetPortValue+0x30>
		{
		case     GPIO_PORTA: PORTA = Copy_u8Value; break;
 20c:	6b bb       	out	0x1b, r22	; 27
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 20e:	81 e0       	ldi	r24, 0x01	; 1
	if ( (Copy_u8PORT <= GPIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==GPIO_PORT_LOW) || (Copy_u8Value==GPIO_PORT_HIGH) ) )
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     GPIO_PORTA: PORTA = Copy_u8Value; break;
 210:	08 95       	ret
		case     GPIO_PORTB: PORTB = Copy_u8Value; break;
 212:	68 bb       	out	0x18, r22	; 24
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 214:	81 e0       	ldi	r24, 0x01	; 1
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     GPIO_PORTA: PORTA = Copy_u8Value; break;
		case     GPIO_PORTB: PORTB = Copy_u8Value; break;
 216:	08 95       	ret
		case     GPIO_PORTC: PORTC = Copy_u8Value; break;
 218:	65 bb       	out	0x15, r22	; 21
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 21a:	81 e0       	ldi	r24, 0x01	; 1
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     GPIO_PORTA: PORTA = Copy_u8Value; break;
		case     GPIO_PORTB: PORTB = Copy_u8Value; break;
		case     GPIO_PORTC: PORTC = Copy_u8Value; break;
 21c:	08 95       	ret
		case     GPIO_PORTD: PORTD = Copy_u8Value; break;
 21e:	62 bb       	out	0x12, r22	; 18
 * return : its status
 */
GPIO_ErrorStatus GPIO_SetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{

	GPIO_ErrorStatus LOC_enumState = GPIO_OK ;
 220:	81 e0       	ldi	r24, 0x01	; 1
		switch (Copy_u8PORT)
		{
		case     GPIO_PORTA: PORTA = Copy_u8Value; break;
		case     GPIO_PORTB: PORTB = Copy_u8Value; break;
		case     GPIO_PORTC: PORTC = Copy_u8Value; break;
		case     GPIO_PORTD: PORTD = Copy_u8Value; break;
 222:	08 95       	ret
		default: LOC_enumState = GPIO_NOK;       break;
		}	
	}
	else
	{
		LOC_enumState = GPIO_NOK;
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	08 95       	ret
		{
		case     GPIO_PORTA: PORTA = Copy_u8Value; break;
		case     GPIO_PORTB: PORTB = Copy_u8Value; break;
		case     GPIO_PORTC: PORTC = Copy_u8Value; break;
		case     GPIO_PORTD: PORTD = Copy_u8Value; break;
		default: LOC_enumState = GPIO_NOK;       break;
 228:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		LOC_enumState = GPIO_NOK;
	}
	return LOC_enumState ;
}
 22a:	08 95       	ret

0000022c <SPI_Init>:
{
	/*Data Order*/
	#if SPI_DATA_ORDER == SPI_DATA_LSB_FIRST
		SET_BIT(SPCR , SPCR_DORD) ;
	#elif SPI_DATA_ORDER == SPI_DATA_MSB_FIRST
		CLR_BIT(SPCR , SPCR_DORD) ;
 22c:	8d b1       	in	r24, 0x0d	; 13
 22e:	8f 7d       	andi	r24, 0xDF	; 223
 230:	8d b9       	out	0x0d, r24	; 13
		GPIO_SetPinDirection(GPIO_PORTB, GPIO_PIN4, GPIO_PIN_OUTPUT);
		GPIO_SetPinDirection(GPIO_PORTB, GPIO_PIN5, GPIO_PIN_OUTPUT);
		GPIO_SetPinDirection(GPIO_PORTB, GPIO_PIN6, GPIO_PIN_INPUT);
		GPIO_SetPinDirection(GPIO_PORTB, GPIO_PIN7, GPIO_PIN_OUTPUT);
		#elif SPI_MASTER_SLAVE_SELECT == SPI_SLAVE
		CLR_BIT(SPCR , SPCR_MSTR) ;
 232:	8d b1       	in	r24, 0x0d	; 13
 234:	8f 7e       	andi	r24, 0xEF	; 239
 236:	8d b9       	out	0x0d, r24	; 13
		GPIO_SetPinDirection(GPIO_PORTB, GPIO_PIN4, GPIO_PIN_INPUT);
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	64 e0       	ldi	r22, 0x04	; 4
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 5a 00 	call	0xb4	; 0xb4 <GPIO_SetPinDirection>
		GPIO_SetPinDirection(GPIO_PORTB, GPIO_PIN5, GPIO_PIN_INPUT);
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	65 e0       	ldi	r22, 0x05	; 5
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 5a 00 	call	0xb4	; 0xb4 <GPIO_SetPinDirection>
		GPIO_SetPinDirection(GPIO_PORTB, GPIO_PIN6, GPIO_PIN_OUTPUT);
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	66 e0       	ldi	r22, 0x06	; 6
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 5a 00 	call	0xb4	; 0xb4 <GPIO_SetPinDirection>
		GPIO_SetPinDirection(GPIO_PORTB, GPIO_PIN7, GPIO_PIN_INPUT);
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	67 e0       	ldi	r22, 0x07	; 7
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 5a 00 	call	0xb4	; 0xb4 <GPIO_SetPinDirection>
		#error "wrong SPI_MASTER_SLAVE_SELECT config"
	#endif

	/*Clock Polarity*/
	#if SPI_CLOCK_POLARITY == SPI_RISING_LEADING_FALLING_TRAILING
		CLR_BIT(SPCR , SPCR_CPOL) ;
 260:	8d b1       	in	r24, 0x0d	; 13
 262:	87 7f       	andi	r24, 0xF7	; 247
 264:	8d b9       	out	0x0d, r24	; 13
		#error "wrong SPI_CLOCK_POLARITY config"
	#endif

	/*Clock Phase*/
	#if SPI_CLOCK_PHASE == SPI_SAMPLE_LEADING_SETUP_TRAILING
		CLR_BIT(SPCR , SPCR_CPHA) ;
 266:	8d b1       	in	r24, 0x0d	; 13
 268:	8b 7f       	andi	r24, 0xFB	; 251
 26a:	8d b9       	out	0x0d, r24	; 13
	#if SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_2
		CLR_BIT(SPCR , SPCR_SPR0) ;
		CLR_BIT(SPCR , SPCR_SPR1) ;
		SET_BIT(SPSR , SPSR_SPI2X) ;
	#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_4
		CLR_BIT(SPCR , SPCR_SPR0) ;
 26c:	8d b1       	in	r24, 0x0d	; 13
 26e:	8e 7f       	andi	r24, 0xFE	; 254
 270:	8d b9       	out	0x0d, r24	; 13
		CLR_BIT(SPCR , SPCR_SPR1) ;
 272:	8d b1       	in	r24, 0x0d	; 13
 274:	8d 7f       	andi	r24, 0xFD	; 253
 276:	8d b9       	out	0x0d, r24	; 13
		CLR_BIT(SPSR , SPSR_SPI2X) ;
 278:	8e b1       	in	r24, 0x0e	; 14
 27a:	8e 7f       	andi	r24, 0xFE	; 254
 27c:	8e b9       	out	0x0e, r24	; 14
		#error "wrong SPI_CLOCK_RATE config"
	#endif

	/*SPI Interrupt Enable*/
	#if SPI_INTERRUPT_ENABLE_MODE == SPI_INTERRUPT_DISABLE
		CLR_BIT(SPCR , SPCR_SPIE) ;
 27e:	8d b1       	in	r24, 0x0d	; 13
 280:	8f 77       	andi	r24, 0x7F	; 127
 282:	8d b9       	out	0x0d, r24	; 13

	/*SPI Enable*/
	#if SPI_ENABLE_MODE == SPI_DISABLE
		CLR_BIT(SPCR , SPCR_SPE) ;
	#elif SPI_ENABLE_MODE == SPI_ENABLE
		SET_BIT(SPCR , SPCR_SPE) ;
 284:	8d b1       	in	r24, 0x0d	; 13
 286:	80 64       	ori	r24, 0x40	; 64
 288:	8d b9       	out	0x0d, r24	; 13
 28a:	08 95       	ret

0000028c <SPI_SendData>:
u8  SPI_SendData (u8 Copy_u8Data)
{
	u8 Local_u8ErrorState = NOK ;
	u32 Local_uint32TimeoutCounter = 0 ;

	if (SPI_u8State == IDLE)
 28c:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 290:	91 30       	cpi	r25, 0x01	; 1
 292:	f9 f4       	brne	.+62     	; 0x2d2 <SPI_SendData+0x46>
	{
		SPI_u8State = BUSY ;
 294:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>

		SPDR = Copy_u8Data ;
 298:	8f b9       	out	0x0f, r24	; 15
}

u8  SPI_SendData (u8 Copy_u8Data)
{
	u8 Local_u8ErrorState = NOK ;
	u32 Local_uint32TimeoutCounter = 0 ;
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	dc 01       	movw	r26, r24
	{
		SPI_u8State = BUSY ;

		SPDR = Copy_u8Data ;

		while ( ( (GET_BIT(SPSR , SPSR_SPIF)) == 0) && (Local_uint32TimeoutCounter < SPI_uint32TIMEOUT) )
 2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <SPI_SendData+0x1c>
		{
			Local_uint32TimeoutCounter++ ;
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	a1 1d       	adc	r26, r1
 2a6:	b1 1d       	adc	r27, r1
	{
		SPI_u8State = BUSY ;

		SPDR = Copy_u8Data ;

		while ( ( (GET_BIT(SPSR , SPSR_SPIF)) == 0) && (Local_uint32TimeoutCounter < SPI_uint32TIMEOUT) )
 2a8:	77 99       	sbic	0x0e, 7	; 14
 2aa:	07 c0       	rjmp	.+14     	; 0x2ba <SPI_SendData+0x2e>
 2ac:	80 3a       	cpi	r24, 0xA0	; 160
 2ae:	26 e8       	ldi	r18, 0x86	; 134
 2b0:	92 07       	cpc	r25, r18
 2b2:	21 e0       	ldi	r18, 0x01	; 1
 2b4:	a2 07       	cpc	r26, r18
 2b6:	b1 05       	cpc	r27, r1
 2b8:	a0 f3       	brcs	.-24     	; 0x2a2 <SPI_SendData+0x16>
		{
			Local_uint32TimeoutCounter++ ;
		}
		if (Local_uint32TimeoutCounter == SPI_uint32TIMEOUT)
 2ba:	80 3a       	cpi	r24, 0xA0	; 160
 2bc:	96 48       	sbci	r25, 0x86	; 134
 2be:	a1 40       	sbci	r26, 0x01	; 1
 2c0:	b1 05       	cpc	r27, r1
 2c2:	11 f4       	brne	.+4      	; 0x2c8 <SPI_SendData+0x3c>
		{
			Local_u8ErrorState = TIMEOUT_STATE ;
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <SPI_SendData+0x3e>
		}
		else
		{
			Local_u8ErrorState = OK ;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
		}
		SPI_u8State = IDLE ;
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
 2d0:	08 95       	ret
	}
	else
	{
		Local_u8ErrorState = BUSY_STATE ;
 2d2:	83 e0       	ldi	r24, 0x03	; 3
	}

	return Local_u8ErrorState ;
	
}
 2d4:	08 95       	ret

000002d6 <SPI_RecevieData>:


u8  SPI_RecevieData (u8 * Copy_u8ReceviedData) 
{
 2d6:	fc 01       	movw	r30, r24
	u8 Local_u8ErrorState = NOK ;
	u32 Local_uint32TimeoutCounter = 0 ;

	if (SPI_u8State == IDLE)
 2d8:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2dc:	91 30       	cpi	r25, 0x01	; 1
 2de:	09 f5       	brne	.+66     	; 0x322 <SPI_RecevieData+0x4c>
	{
		SPI_u8State = BUSY ;
 2e0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>


u8  SPI_RecevieData (u8 * Copy_u8ReceviedData) 
{
	u8 Local_u8ErrorState = NOK ;
	u32 Local_uint32TimeoutCounter = 0 ;
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	50 e0       	ldi	r21, 0x00	; 0
 2e8:	ba 01       	movw	r22, r20

	if (SPI_u8State == IDLE)
	{
		SPI_u8State = BUSY ;

		while ( ( (GET_BIT(SPSR , SPSR_SPIF)) == 0) && (Local_uint32TimeoutCounter < SPI_uint32TIMEOUT) )
 2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <SPI_RecevieData+0x1e>
		{
			Local_uint32TimeoutCounter++ ;
 2ec:	4f 5f       	subi	r20, 0xFF	; 255
 2ee:	5f 4f       	sbci	r21, 0xFF	; 255
 2f0:	6f 4f       	sbci	r22, 0xFF	; 255
 2f2:	7f 4f       	sbci	r23, 0xFF	; 255

	if (SPI_u8State == IDLE)
	{
		SPI_u8State = BUSY ;

		while ( ( (GET_BIT(SPSR , SPSR_SPIF)) == 0) && (Local_uint32TimeoutCounter < SPI_uint32TIMEOUT) )
 2f4:	77 99       	sbic	0x0e, 7	; 14
 2f6:	07 c0       	rjmp	.+14     	; 0x306 <SPI_RecevieData+0x30>
 2f8:	40 3a       	cpi	r20, 0xA0	; 160
 2fa:	86 e8       	ldi	r24, 0x86	; 134
 2fc:	58 07       	cpc	r21, r24
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	68 07       	cpc	r22, r24
 302:	71 05       	cpc	r23, r1
 304:	98 f3       	brcs	.-26     	; 0x2ec <SPI_RecevieData+0x16>
		{
			Local_uint32TimeoutCounter++ ;
		}
		if (Local_uint32TimeoutCounter == SPI_uint32TIMEOUT)
 306:	40 3a       	cpi	r20, 0xA0	; 160
 308:	56 48       	sbci	r21, 0x86	; 134
 30a:	61 40       	sbci	r22, 0x01	; 1
 30c:	71 05       	cpc	r23, r1
 30e:	21 f0       	breq	.+8      	; 0x318 <SPI_RecevieData+0x42>
		{
			Local_u8ErrorState = TIMEOUT_STATE ;
		}
		else
		{
			* Copy_u8ReceviedData = SPDR ;
 310:	8f b1       	in	r24, 0x0f	; 15
 312:	80 83       	st	Z, r24
			Local_u8ErrorState = OK ;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	01 c0       	rjmp	.+2      	; 0x31a <SPI_RecevieData+0x44>
		{
			Local_uint32TimeoutCounter++ ;
		}
		if (Local_uint32TimeoutCounter == SPI_uint32TIMEOUT)
		{
			Local_u8ErrorState = TIMEOUT_STATE ;
 318:	82 e0       	ldi	r24, 0x02	; 2
		else
		{
			* Copy_u8ReceviedData = SPDR ;
			Local_u8ErrorState = OK ;
		}
		SPI_u8State = IDLE ;
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
 320:	08 95       	ret
	}
	else
	{
		Local_u8ErrorState = BUSY_STATE ;
 322:	83 e0       	ldi	r24, 0x03	; 3
	}

	return Local_u8ErrorState ;
 324:	08 95       	ret

00000326 <_exit>:
 326:	f8 94       	cli

00000328 <__stop_program>:
 328:	ff cf       	rjmp	.-2      	; 0x328 <__stop_program>
